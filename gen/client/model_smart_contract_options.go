/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// SmartContractOptions - Options for smart contract creation
type SmartContractOptions struct {
	NFTContractOptions *NFTContractOptions
	TokenContractOptions *TokenContractOptions
}

// NFTContractOptionsAsSmartContractOptions is a convenience function that returns NFTContractOptions wrapped in SmartContractOptions
func NFTContractOptionsAsSmartContractOptions(v *NFTContractOptions) SmartContractOptions {
	return SmartContractOptions{
		NFTContractOptions: v,
	}
}

// TokenContractOptionsAsSmartContractOptions is a convenience function that returns TokenContractOptions wrapped in SmartContractOptions
func TokenContractOptionsAsSmartContractOptions(v *TokenContractOptions) SmartContractOptions {
	return SmartContractOptions{
		TokenContractOptions: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SmartContractOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NFTContractOptions
	err = newStrictDecoder(data).Decode(&dst.NFTContractOptions)
	if err == nil {
		jsonNFTContractOptions, _ := json.Marshal(dst.NFTContractOptions)
		if string(jsonNFTContractOptions) == "{}" { // empty struct
			dst.NFTContractOptions = nil
		} else {
			if err = validator.Validate(dst.NFTContractOptions); err != nil {
				dst.NFTContractOptions = nil
			} else {
				match++
			}
		}
	} else {
		dst.NFTContractOptions = nil
	}

	// try to unmarshal data into TokenContractOptions
	err = newStrictDecoder(data).Decode(&dst.TokenContractOptions)
	if err == nil {
		jsonTokenContractOptions, _ := json.Marshal(dst.TokenContractOptions)
		if string(jsonTokenContractOptions) == "{}" { // empty struct
			dst.TokenContractOptions = nil
		} else {
			if err = validator.Validate(dst.TokenContractOptions); err != nil {
				dst.TokenContractOptions = nil
			} else {
				match++
			}
		}
	} else {
		dst.TokenContractOptions = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NFTContractOptions = nil
		dst.TokenContractOptions = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SmartContractOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SmartContractOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SmartContractOptions) MarshalJSON() ([]byte, error) {
	if src.NFTContractOptions != nil {
		return json.Marshal(&src.NFTContractOptions)
	}

	if src.TokenContractOptions != nil {
		return json.Marshal(&src.TokenContractOptions)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SmartContractOptions) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NFTContractOptions != nil {
		return obj.NFTContractOptions
	}

	if obj.TokenContractOptions != nil {
		return obj.TokenContractOptions
	}

	// all schemas are nil
	return nil
}

type NullableSmartContractOptions struct {
	value *SmartContractOptions
	isSet bool
}

func (v NullableSmartContractOptions) Get() *SmartContractOptions {
	return v.value
}

func (v *NullableSmartContractOptions) Set(val *SmartContractOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractOptions(val *SmartContractOptions) *NullableSmartContractOptions {
	return &NullableSmartContractOptions{value: val, isSet: true}
}

func (v NullableSmartContractOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


