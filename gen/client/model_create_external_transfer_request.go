/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateExternalTransferRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateExternalTransferRequest{}

// CreateExternalTransferRequest struct for CreateExternalTransferRequest
type CreateExternalTransferRequest struct {
	// The amount to transfer
	Amount string `json:"amount"`
	// The ID of the asset to transfer. Can be an asset symbol or a token contract address.
	AssetId string `json:"asset_id"`
	// The destination address, which can be a 0x address, Basename, or ENS name
	Destination string `json:"destination"`
	// Whether the transfer uses sponsored gas
	Gasless bool `json:"gasless"`
	// When true, the transfer will be submitted immediately. Otherwise, the transfer will be batched. Defaults to false. Note: Requires the gasless option to be set to true. 
	SkipBatching *bool `json:"skip_batching,omitempty"`
}

type _CreateExternalTransferRequest CreateExternalTransferRequest

// NewCreateExternalTransferRequest instantiates a new CreateExternalTransferRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateExternalTransferRequest(amount string, assetId string, destination string, gasless bool) *CreateExternalTransferRequest {
	this := CreateExternalTransferRequest{}
	this.Amount = amount
	this.AssetId = assetId
	this.Destination = destination
	this.Gasless = gasless
	return &this
}

// NewCreateExternalTransferRequestWithDefaults instantiates a new CreateExternalTransferRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateExternalTransferRequestWithDefaults() *CreateExternalTransferRequest {
	this := CreateExternalTransferRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *CreateExternalTransferRequest) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreateExternalTransferRequest) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreateExternalTransferRequest) SetAmount(v string) {
	o.Amount = v
}

// GetAssetId returns the AssetId field value
func (o *CreateExternalTransferRequest) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *CreateExternalTransferRequest) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *CreateExternalTransferRequest) SetAssetId(v string) {
	o.AssetId = v
}

// GetDestination returns the Destination field value
func (o *CreateExternalTransferRequest) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *CreateExternalTransferRequest) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *CreateExternalTransferRequest) SetDestination(v string) {
	o.Destination = v
}

// GetGasless returns the Gasless field value
func (o *CreateExternalTransferRequest) GetGasless() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Gasless
}

// GetGaslessOk returns a tuple with the Gasless field value
// and a boolean to check if the value has been set.
func (o *CreateExternalTransferRequest) GetGaslessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gasless, true
}

// SetGasless sets field value
func (o *CreateExternalTransferRequest) SetGasless(v bool) {
	o.Gasless = v
}

// GetSkipBatching returns the SkipBatching field value if set, zero value otherwise.
func (o *CreateExternalTransferRequest) GetSkipBatching() bool {
	if o == nil || IsNil(o.SkipBatching) {
		var ret bool
		return ret
	}
	return *o.SkipBatching
}

// GetSkipBatchingOk returns a tuple with the SkipBatching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExternalTransferRequest) GetSkipBatchingOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipBatching) {
		return nil, false
	}
	return o.SkipBatching, true
}

// HasSkipBatching returns a boolean if a field has been set.
func (o *CreateExternalTransferRequest) HasSkipBatching() bool {
	if o != nil && !IsNil(o.SkipBatching) {
		return true
	}

	return false
}

// SetSkipBatching gets a reference to the given bool and assigns it to the SkipBatching field.
func (o *CreateExternalTransferRequest) SetSkipBatching(v bool) {
	o.SkipBatching = &v
}

func (o CreateExternalTransferRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateExternalTransferRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["asset_id"] = o.AssetId
	toSerialize["destination"] = o.Destination
	toSerialize["gasless"] = o.Gasless
	if !IsNil(o.SkipBatching) {
		toSerialize["skip_batching"] = o.SkipBatching
	}
	return toSerialize, nil
}

func (o *CreateExternalTransferRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"asset_id",
		"destination",
		"gasless",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateExternalTransferRequest := _CreateExternalTransferRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateExternalTransferRequest)

	if err != nil {
		return err
	}

	*o = CreateExternalTransferRequest(varCreateExternalTransferRequest)

	return err
}

type NullableCreateExternalTransferRequest struct {
	value *CreateExternalTransferRequest
	isSet bool
}

func (v NullableCreateExternalTransferRequest) Get() *CreateExternalTransferRequest {
	return v.value
}

func (v *NullableCreateExternalTransferRequest) Set(val *CreateExternalTransferRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateExternalTransferRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateExternalTransferRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateExternalTransferRequest(val *CreateExternalTransferRequest) *NullableCreateExternalTransferRequest {
	return &NullableCreateExternalTransferRequest{value: val, isSet: true}
}

func (v NullableCreateExternalTransferRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateExternalTransferRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


