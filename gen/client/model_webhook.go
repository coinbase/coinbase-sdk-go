/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Webhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Webhook{}

// Webhook Webhook that is used for getting notifications when monitored events occur.
type Webhook struct {
	// Identifier of the webhook.
	Id *string `json:"id,omitempty"`
	// The ID of the blockchain network
	NetworkId *string `json:"network_id,omitempty"`
	EventType *WebhookEventType `json:"event_type,omitempty"`
	EventTypeFilter *WebhookEventTypeFilter `json:"event_type_filter,omitempty"`
	// Webhook will monitor all events that matches any one of the event filters.
	EventFilters []WebhookEventFilter `json:"event_filters,omitempty"`
	// The URL to which the notifications will be sent.
	NotificationUri *string `json:"notification_uri,omitempty"`
	// The date and time the webhook was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time the webhook was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The header that will contain the signature of the webhook payload.
	SignatureHeader *string `json:"signature_header,omitempty"`
}

// NewWebhook instantiates a new Webhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhook() *Webhook {
	this := Webhook{}
	return &this
}

// NewWebhookWithDefaults instantiates a new Webhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookWithDefaults() *Webhook {
	this := Webhook{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Webhook) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Webhook) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Webhook) SetId(v string) {
	o.Id = &v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *Webhook) GetNetworkId() string {
	if o == nil || IsNil(o.NetworkId) {
		var ret string
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetNetworkIdOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *Webhook) HasNetworkId() bool {
	if o != nil && !IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given string and assigns it to the NetworkId field.
func (o *Webhook) SetNetworkId(v string) {
	o.NetworkId = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *Webhook) GetEventType() WebhookEventType {
	if o == nil || IsNil(o.EventType) {
		var ret WebhookEventType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetEventTypeOk() (*WebhookEventType, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *Webhook) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given WebhookEventType and assigns it to the EventType field.
func (o *Webhook) SetEventType(v WebhookEventType) {
	o.EventType = &v
}

// GetEventTypeFilter returns the EventTypeFilter field value if set, zero value otherwise.
func (o *Webhook) GetEventTypeFilter() WebhookEventTypeFilter {
	if o == nil || IsNil(o.EventTypeFilter) {
		var ret WebhookEventTypeFilter
		return ret
	}
	return *o.EventTypeFilter
}

// GetEventTypeFilterOk returns a tuple with the EventTypeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetEventTypeFilterOk() (*WebhookEventTypeFilter, bool) {
	if o == nil || IsNil(o.EventTypeFilter) {
		return nil, false
	}
	return o.EventTypeFilter, true
}

// HasEventTypeFilter returns a boolean if a field has been set.
func (o *Webhook) HasEventTypeFilter() bool {
	if o != nil && !IsNil(o.EventTypeFilter) {
		return true
	}

	return false
}

// SetEventTypeFilter gets a reference to the given WebhookEventTypeFilter and assigns it to the EventTypeFilter field.
func (o *Webhook) SetEventTypeFilter(v WebhookEventTypeFilter) {
	o.EventTypeFilter = &v
}

// GetEventFilters returns the EventFilters field value if set, zero value otherwise.
func (o *Webhook) GetEventFilters() []WebhookEventFilter {
	if o == nil || IsNil(o.EventFilters) {
		var ret []WebhookEventFilter
		return ret
	}
	return o.EventFilters
}

// GetEventFiltersOk returns a tuple with the EventFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetEventFiltersOk() ([]WebhookEventFilter, bool) {
	if o == nil || IsNil(o.EventFilters) {
		return nil, false
	}
	return o.EventFilters, true
}

// HasEventFilters returns a boolean if a field has been set.
func (o *Webhook) HasEventFilters() bool {
	if o != nil && !IsNil(o.EventFilters) {
		return true
	}

	return false
}

// SetEventFilters gets a reference to the given []WebhookEventFilter and assigns it to the EventFilters field.
func (o *Webhook) SetEventFilters(v []WebhookEventFilter) {
	o.EventFilters = v
}

// GetNotificationUri returns the NotificationUri field value if set, zero value otherwise.
func (o *Webhook) GetNotificationUri() string {
	if o == nil || IsNil(o.NotificationUri) {
		var ret string
		return ret
	}
	return *o.NotificationUri
}

// GetNotificationUriOk returns a tuple with the NotificationUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetNotificationUriOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationUri) {
		return nil, false
	}
	return o.NotificationUri, true
}

// HasNotificationUri returns a boolean if a field has been set.
func (o *Webhook) HasNotificationUri() bool {
	if o != nil && !IsNil(o.NotificationUri) {
		return true
	}

	return false
}

// SetNotificationUri gets a reference to the given string and assigns it to the NotificationUri field.
func (o *Webhook) SetNotificationUri(v string) {
	o.NotificationUri = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Webhook) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Webhook) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Webhook) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Webhook) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Webhook) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Webhook) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetSignatureHeader returns the SignatureHeader field value if set, zero value otherwise.
func (o *Webhook) GetSignatureHeader() string {
	if o == nil || IsNil(o.SignatureHeader) {
		var ret string
		return ret
	}
	return *o.SignatureHeader
}

// GetSignatureHeaderOk returns a tuple with the SignatureHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetSignatureHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureHeader) {
		return nil, false
	}
	return o.SignatureHeader, true
}

// HasSignatureHeader returns a boolean if a field has been set.
func (o *Webhook) HasSignatureHeader() bool {
	if o != nil && !IsNil(o.SignatureHeader) {
		return true
	}

	return false
}

// SetSignatureHeader gets a reference to the given string and assigns it to the SignatureHeader field.
func (o *Webhook) SetSignatureHeader(v string) {
	o.SignatureHeader = &v
}

func (o Webhook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Webhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NetworkId) {
		toSerialize["network_id"] = o.NetworkId
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.EventTypeFilter) {
		toSerialize["event_type_filter"] = o.EventTypeFilter
	}
	if !IsNil(o.EventFilters) {
		toSerialize["event_filters"] = o.EventFilters
	}
	if !IsNil(o.NotificationUri) {
		toSerialize["notification_uri"] = o.NotificationUri
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.SignatureHeader) {
		toSerialize["signature_header"] = o.SignatureHeader
	}
	return toSerialize, nil
}

type NullableWebhook struct {
	value *Webhook
	isSet bool
}

func (v NullableWebhook) Get() *Webhook {
	return v.value
}

func (v *NullableWebhook) Set(val *Webhook) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhook(val *Webhook) *NullableWebhook {
	return &NullableWebhook{value: val, isSet: true}
}

func (v NullableWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


