/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ContractInvocationsAPI interface {

	/*
	BroadcastContractInvocation Broadcast a contract invocation.

	Broadcast a contract invocation.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param walletId The ID of the wallet the address belongs to.
	@param addressId The ID of the address the contract invocation belongs to.
	@param contractInvocationId The ID of the contract invocation to broadcast.
	@return ApiBroadcastContractInvocationRequest
	*/
	BroadcastContractInvocation(ctx context.Context, walletId string, addressId string, contractInvocationId string) ApiBroadcastContractInvocationRequest

	// BroadcastContractInvocationExecute executes the request
	//  @return ContractInvocation
	BroadcastContractInvocationExecute(r ApiBroadcastContractInvocationRequest) (*ContractInvocation, *http.Response, error)

	/*
	CreateContractInvocation Create a new contract invocation for an address.

	Create a new contract invocation.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param walletId The ID of the wallet the source address belongs to.
	@param addressId The ID of the address to invoke the contract from.
	@return ApiCreateContractInvocationRequest
	*/
	CreateContractInvocation(ctx context.Context, walletId string, addressId string) ApiCreateContractInvocationRequest

	// CreateContractInvocationExecute executes the request
	//  @return ContractInvocation
	CreateContractInvocationExecute(r ApiCreateContractInvocationRequest) (*ContractInvocation, *http.Response, error)

	/*
	GetContractInvocation Get a contract invocation by ID.

	Get a contract invocation by ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param walletId The ID of the wallet the address belongs to.
	@param addressId The ID of the address the contract invocation belongs to.
	@param contractInvocationId The ID of the contract invocation to fetch.
	@return ApiGetContractInvocationRequest
	*/
	GetContractInvocation(ctx context.Context, walletId string, addressId string, contractInvocationId string) ApiGetContractInvocationRequest

	// GetContractInvocationExecute executes the request
	//  @return ContractInvocation
	GetContractInvocationExecute(r ApiGetContractInvocationRequest) (*ContractInvocation, *http.Response, error)

	/*
	ListContractInvocations List contract invocations for an address.

	List contract invocations for an address.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param walletId The ID of the wallet the address belongs to.
	@param addressId The ID of the address to list contract invocations for.
	@return ApiListContractInvocationsRequest
	*/
	ListContractInvocations(ctx context.Context, walletId string, addressId string) ApiListContractInvocationsRequest

	// ListContractInvocationsExecute executes the request
	//  @return ContractInvocationList
	ListContractInvocationsExecute(r ApiListContractInvocationsRequest) (*ContractInvocationList, *http.Response, error)
}

// ContractInvocationsAPIService ContractInvocationsAPI service
type ContractInvocationsAPIService service

type ApiBroadcastContractInvocationRequest struct {
	ctx context.Context
	ApiService ContractInvocationsAPI
	walletId string
	addressId string
	contractInvocationId string
	broadcastContractInvocationRequest *BroadcastContractInvocationRequest
}

func (r ApiBroadcastContractInvocationRequest) BroadcastContractInvocationRequest(broadcastContractInvocationRequest BroadcastContractInvocationRequest) ApiBroadcastContractInvocationRequest {
	r.broadcastContractInvocationRequest = &broadcastContractInvocationRequest
	return r
}

func (r ApiBroadcastContractInvocationRequest) Execute() (*ContractInvocation, *http.Response, error) {
	return r.ApiService.BroadcastContractInvocationExecute(r)
}

/*
BroadcastContractInvocation Broadcast a contract invocation.

Broadcast a contract invocation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId The ID of the wallet the address belongs to.
 @param addressId The ID of the address the contract invocation belongs to.
 @param contractInvocationId The ID of the contract invocation to broadcast.
 @return ApiBroadcastContractInvocationRequest
*/
func (a *ContractInvocationsAPIService) BroadcastContractInvocation(ctx context.Context, walletId string, addressId string, contractInvocationId string) ApiBroadcastContractInvocationRequest {
	return ApiBroadcastContractInvocationRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
		addressId: addressId,
		contractInvocationId: contractInvocationId,
	}
}

// Execute executes the request
//  @return ContractInvocation
func (a *ContractInvocationsAPIService) BroadcastContractInvocationExecute(r ApiBroadcastContractInvocationRequest) (*ContractInvocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContractInvocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContractInvocationsAPIService.BroadcastContractInvocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations/{contract_invocation_id}/broadcast"
	localVarPath = strings.Replace(localVarPath, "{"+"wallet_id"+"}", url.PathEscape(parameterValueToString(r.walletId, "walletId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contract_invocation_id"+"}", url.PathEscape(parameterValueToString(r.contractInvocationId, "contractInvocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.broadcastContractInvocationRequest == nil {
		return localVarReturnValue, nil, reportError("broadcastContractInvocationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.broadcastContractInvocationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateContractInvocationRequest struct {
	ctx context.Context
	ApiService ContractInvocationsAPI
	walletId string
	addressId string
	createContractInvocationRequest *CreateContractInvocationRequest
}

func (r ApiCreateContractInvocationRequest) CreateContractInvocationRequest(createContractInvocationRequest CreateContractInvocationRequest) ApiCreateContractInvocationRequest {
	r.createContractInvocationRequest = &createContractInvocationRequest
	return r
}

func (r ApiCreateContractInvocationRequest) Execute() (*ContractInvocation, *http.Response, error) {
	return r.ApiService.CreateContractInvocationExecute(r)
}

/*
CreateContractInvocation Create a new contract invocation for an address.

Create a new contract invocation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId The ID of the wallet the source address belongs to.
 @param addressId The ID of the address to invoke the contract from.
 @return ApiCreateContractInvocationRequest
*/
func (a *ContractInvocationsAPIService) CreateContractInvocation(ctx context.Context, walletId string, addressId string) ApiCreateContractInvocationRequest {
	return ApiCreateContractInvocationRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
		addressId: addressId,
	}
}

// Execute executes the request
//  @return ContractInvocation
func (a *ContractInvocationsAPIService) CreateContractInvocationExecute(r ApiCreateContractInvocationRequest) (*ContractInvocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContractInvocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContractInvocationsAPIService.CreateContractInvocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations"
	localVarPath = strings.Replace(localVarPath, "{"+"wallet_id"+"}", url.PathEscape(parameterValueToString(r.walletId, "walletId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createContractInvocationRequest == nil {
		return localVarReturnValue, nil, reportError("createContractInvocationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createContractInvocationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetContractInvocationRequest struct {
	ctx context.Context
	ApiService ContractInvocationsAPI
	walletId string
	addressId string
	contractInvocationId string
}

func (r ApiGetContractInvocationRequest) Execute() (*ContractInvocation, *http.Response, error) {
	return r.ApiService.GetContractInvocationExecute(r)
}

/*
GetContractInvocation Get a contract invocation by ID.

Get a contract invocation by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId The ID of the wallet the address belongs to.
 @param addressId The ID of the address the contract invocation belongs to.
 @param contractInvocationId The ID of the contract invocation to fetch.
 @return ApiGetContractInvocationRequest
*/
func (a *ContractInvocationsAPIService) GetContractInvocation(ctx context.Context, walletId string, addressId string, contractInvocationId string) ApiGetContractInvocationRequest {
	return ApiGetContractInvocationRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
		addressId: addressId,
		contractInvocationId: contractInvocationId,
	}
}

// Execute executes the request
//  @return ContractInvocation
func (a *ContractInvocationsAPIService) GetContractInvocationExecute(r ApiGetContractInvocationRequest) (*ContractInvocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContractInvocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContractInvocationsAPIService.GetContractInvocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations/{contract_invocation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"wallet_id"+"}", url.PathEscape(parameterValueToString(r.walletId, "walletId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contract_invocation_id"+"}", url.PathEscape(parameterValueToString(r.contractInvocationId, "contractInvocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListContractInvocationsRequest struct {
	ctx context.Context
	ApiService ContractInvocationsAPI
	walletId string
	addressId string
	limit *int32
	page *string
}

// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
func (r ApiListContractInvocationsRequest) Limit(limit int32) ApiListContractInvocationsRequest {
	r.limit = &limit
	return r
}

// A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
func (r ApiListContractInvocationsRequest) Page(page string) ApiListContractInvocationsRequest {
	r.page = &page
	return r
}

func (r ApiListContractInvocationsRequest) Execute() (*ContractInvocationList, *http.Response, error) {
	return r.ApiService.ListContractInvocationsExecute(r)
}

/*
ListContractInvocations List contract invocations for an address.

List contract invocations for an address.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId The ID of the wallet the address belongs to.
 @param addressId The ID of the address to list contract invocations for.
 @return ApiListContractInvocationsRequest
*/
func (a *ContractInvocationsAPIService) ListContractInvocations(ctx context.Context, walletId string, addressId string) ApiListContractInvocationsRequest {
	return ApiListContractInvocationsRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
		addressId: addressId,
	}
}

// Execute executes the request
//  @return ContractInvocationList
func (a *ContractInvocationsAPIService) ListContractInvocationsExecute(r ApiListContractInvocationsRequest) (*ContractInvocationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContractInvocationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContractInvocationsAPIService.ListContractInvocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/wallets/{wallet_id}/addresses/{address_id}/contract_invocations"
	localVarPath = strings.Replace(localVarPath, "{"+"wallet_id"+"}", url.PathEscape(parameterValueToString(r.walletId, "walletId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
