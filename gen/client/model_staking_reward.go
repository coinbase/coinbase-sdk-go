/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the StakingReward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StakingReward{}

// StakingReward The staking rewards for an address.
type StakingReward struct {
	// The onchain address for which the staking rewards are being fetched.
	AddressId string `json:"address_id"`
	// The timestamp of the reward in UTC.
	Date time.Time `json:"date"`
	// The reward amount in requested \"format\". Default is USD.
	Amount string `json:"amount"`
	// The state of the reward.
	State string `json:"state"`
	Format StakingRewardFormat `json:"format"`
	UsdValue StakingRewardUSDValue `json:"usd_value"`
}

type _StakingReward StakingReward

// NewStakingReward instantiates a new StakingReward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakingReward(addressId string, date time.Time, amount string, state string, format StakingRewardFormat, usdValue StakingRewardUSDValue) *StakingReward {
	this := StakingReward{}
	this.AddressId = addressId
	this.Date = date
	this.Amount = amount
	this.State = state
	this.Format = format
	this.UsdValue = usdValue
	return &this
}

// NewStakingRewardWithDefaults instantiates a new StakingReward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakingRewardWithDefaults() *StakingReward {
	this := StakingReward{}
	var format StakingRewardFormat = STAKINGREWARDFORMAT_USD
	this.Format = format
	return &this
}

// GetAddressId returns the AddressId field value
func (o *StakingReward) GetAddressId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value
// and a boolean to check if the value has been set.
func (o *StakingReward) GetAddressIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressId, true
}

// SetAddressId sets field value
func (o *StakingReward) SetAddressId(v string) {
	o.AddressId = v
}

// GetDate returns the Date field value
func (o *StakingReward) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *StakingReward) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *StakingReward) SetDate(v time.Time) {
	o.Date = v
}

// GetAmount returns the Amount field value
func (o *StakingReward) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *StakingReward) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *StakingReward) SetAmount(v string) {
	o.Amount = v
}

// GetState returns the State field value
func (o *StakingReward) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *StakingReward) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *StakingReward) SetState(v string) {
	o.State = v
}

// GetFormat returns the Format field value
func (o *StakingReward) GetFormat() StakingRewardFormat {
	if o == nil {
		var ret StakingRewardFormat
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *StakingReward) GetFormatOk() (*StakingRewardFormat, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *StakingReward) SetFormat(v StakingRewardFormat) {
	o.Format = v
}

// GetUsdValue returns the UsdValue field value
func (o *StakingReward) GetUsdValue() StakingRewardUSDValue {
	if o == nil {
		var ret StakingRewardUSDValue
		return ret
	}

	return o.UsdValue
}

// GetUsdValueOk returns a tuple with the UsdValue field value
// and a boolean to check if the value has been set.
func (o *StakingReward) GetUsdValueOk() (*StakingRewardUSDValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsdValue, true
}

// SetUsdValue sets field value
func (o *StakingReward) SetUsdValue(v StakingRewardUSDValue) {
	o.UsdValue = v
}

func (o StakingReward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StakingReward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address_id"] = o.AddressId
	toSerialize["date"] = o.Date
	toSerialize["amount"] = o.Amount
	toSerialize["state"] = o.State
	toSerialize["format"] = o.Format
	toSerialize["usd_value"] = o.UsdValue
	return toSerialize, nil
}

func (o *StakingReward) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address_id",
		"date",
		"amount",
		"state",
		"format",
		"usd_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStakingReward := _StakingReward{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStakingReward)

	if err != nil {
		return err
	}

	*o = StakingReward(varStakingReward)

	return err
}

type NullableStakingReward struct {
	value *StakingReward
	isSet bool
}

func (v NullableStakingReward) Get() *StakingReward {
	return v.value
}

func (v *NullableStakingReward) Set(val *StakingReward) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingReward) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingReward(val *StakingReward) *NullableStakingReward {
	return &NullableStakingReward{value: val, isSet: true}
}

func (v NullableStakingReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


