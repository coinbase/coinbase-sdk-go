/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the TransactionLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionLog{}

// TransactionLog A log emitted from an onchain transaction.
type TransactionLog struct {
	// An onchain address of a contract.
	Address string `json:"address"`
	Topics []string `json:"topics"`
	// The data included in this log.
	Data string `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _TransactionLog TransactionLog

// NewTransactionLog instantiates a new TransactionLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionLog(address string, topics []string, data string) *TransactionLog {
	this := TransactionLog{}
	this.Address = address
	this.Topics = topics
	this.Data = data
	return &this
}

// NewTransactionLogWithDefaults instantiates a new TransactionLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionLogWithDefaults() *TransactionLog {
	this := TransactionLog{}
	return &this
}

// GetAddress returns the Address field value
func (o *TransactionLog) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TransactionLog) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TransactionLog) SetAddress(v string) {
	o.Address = v
}

// GetTopics returns the Topics field value
func (o *TransactionLog) GetTopics() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value
// and a boolean to check if the value has been set.
func (o *TransactionLog) GetTopicsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Topics, true
}

// SetTopics sets field value
func (o *TransactionLog) SetTopics(v []string) {
	o.Topics = v
}

// GetData returns the Data field value
func (o *TransactionLog) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TransactionLog) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *TransactionLog) SetData(v string) {
	o.Data = v
}

func (o TransactionLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["topics"] = o.Topics
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TransactionLog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"topics",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionLog := _TransactionLog{}

	err = json.Unmarshal(data, &varTransactionLog)

	if err != nil {
		return err
	}

	*o = TransactionLog(varTransactionLog)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "topics")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransactionLog struct {
	value *TransactionLog
	isSet bool
}

func (v NullableTransactionLog) Get() *TransactionLog {
	return v.value
}

func (v *NullableTransactionLog) Set(val *TransactionLog) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionLog) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionLog(val *TransactionLog) *NullableTransactionLog {
	return &NullableTransactionLog{value: val, isSet: true}
}

func (v NullableTransactionLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


