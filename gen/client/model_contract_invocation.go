/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractInvocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractInvocation{}

// ContractInvocation A contract invocation onchain.
type ContractInvocation struct {
	// The ID of the blockchain network.
	NetworkId string `json:"network_id"`
	// The ID of the wallet that owns the address.
	WalletId string `json:"wallet_id"`
	// The onchain address of the address invoking the contract.
	AddressId string `json:"address_id"`
	// The ID of the contract invocation.
	ContractInvocationId string `json:"contract_invocation_id"`
	// The onchain address of the contract.
	ContractAddress string `json:"contract_address"`
	// The method to be invoked on the contract.
	Method string `json:"method"`
	// The JSON-encoded arguments to pass to the contract method. The keys should be the argument names and the values should be the argument values.
	Args string `json:"args"`
	// The JSON-encoded ABI of the contract.
	Abi *string `json:"abi,omitempty"`
	// The amount to send to the contract for a payable method
	Amount string `json:"amount"`
	Transaction Transaction `json:"transaction"`
}

type _ContractInvocation ContractInvocation

// NewContractInvocation instantiates a new ContractInvocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractInvocation(networkId string, walletId string, addressId string, contractInvocationId string, contractAddress string, method string, args string, amount string, transaction Transaction) *ContractInvocation {
	this := ContractInvocation{}
	this.NetworkId = networkId
	this.WalletId = walletId
	this.AddressId = addressId
	this.ContractInvocationId = contractInvocationId
	this.ContractAddress = contractAddress
	this.Method = method
	this.Args = args
	this.Amount = amount
	this.Transaction = transaction
	return &this
}

// NewContractInvocationWithDefaults instantiates a new ContractInvocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractInvocationWithDefaults() *ContractInvocation {
	this := ContractInvocation{}
	return &this
}

// GetNetworkId returns the NetworkId field value
func (o *ContractInvocation) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *ContractInvocation) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetWalletId returns the WalletId field value
func (o *ContractInvocation) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *ContractInvocation) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddressId returns the AddressId field value
func (o *ContractInvocation) GetAddressId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetAddressIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressId, true
}

// SetAddressId sets field value
func (o *ContractInvocation) SetAddressId(v string) {
	o.AddressId = v
}

// GetContractInvocationId returns the ContractInvocationId field value
func (o *ContractInvocation) GetContractInvocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractInvocationId
}

// GetContractInvocationIdOk returns a tuple with the ContractInvocationId field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetContractInvocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractInvocationId, true
}

// SetContractInvocationId sets field value
func (o *ContractInvocation) SetContractInvocationId(v string) {
	o.ContractInvocationId = v
}

// GetContractAddress returns the ContractAddress field value
func (o *ContractInvocation) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *ContractInvocation) SetContractAddress(v string) {
	o.ContractAddress = v
}

// GetMethod returns the Method field value
func (o *ContractInvocation) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *ContractInvocation) SetMethod(v string) {
	o.Method = v
}

// GetArgs returns the Args field value
func (o *ContractInvocation) GetArgs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Args
}

// GetArgsOk returns a tuple with the Args field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetArgsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Args, true
}

// SetArgs sets field value
func (o *ContractInvocation) SetArgs(v string) {
	o.Args = v
}

// GetAbi returns the Abi field value if set, zero value otherwise.
func (o *ContractInvocation) GetAbi() string {
	if o == nil || IsNil(o.Abi) {
		var ret string
		return ret
	}
	return *o.Abi
}

// GetAbiOk returns a tuple with the Abi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetAbiOk() (*string, bool) {
	if o == nil || IsNil(o.Abi) {
		return nil, false
	}
	return o.Abi, true
}

// HasAbi returns a boolean if a field has been set.
func (o *ContractInvocation) HasAbi() bool {
	if o != nil && !IsNil(o.Abi) {
		return true
	}

	return false
}

// SetAbi gets a reference to the given string and assigns it to the Abi field.
func (o *ContractInvocation) SetAbi(v string) {
	o.Abi = &v
}

// GetAmount returns the Amount field value
func (o *ContractInvocation) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ContractInvocation) SetAmount(v string) {
	o.Amount = v
}

// GetTransaction returns the Transaction field value
func (o *ContractInvocation) GetTransaction() Transaction {
	if o == nil {
		var ret Transaction
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *ContractInvocation) GetTransactionOk() (*Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *ContractInvocation) SetTransaction(v Transaction) {
	o.Transaction = v
}

func (o ContractInvocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractInvocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network_id"] = o.NetworkId
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["address_id"] = o.AddressId
	toSerialize["contract_invocation_id"] = o.ContractInvocationId
	toSerialize["contract_address"] = o.ContractAddress
	toSerialize["method"] = o.Method
	toSerialize["args"] = o.Args
	if !IsNil(o.Abi) {
		toSerialize["abi"] = o.Abi
	}
	toSerialize["amount"] = o.Amount
	toSerialize["transaction"] = o.Transaction
	return toSerialize, nil
}

func (o *ContractInvocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_id",
		"wallet_id",
		"address_id",
		"contract_invocation_id",
		"contract_address",
		"method",
		"args",
		"amount",
		"transaction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractInvocation := _ContractInvocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractInvocation)

	if err != nil {
		return err
	}

	*o = ContractInvocation(varContractInvocation)

	return err
}

type NullableContractInvocation struct {
	value *ContractInvocation
	isSet bool
}

func (v NullableContractInvocation) Get() *ContractInvocation {
	return v.value
}

func (v *NullableContractInvocation) Set(val *ContractInvocation) {
	v.value = val
	v.isSet = true
}

func (v NullableContractInvocation) IsSet() bool {
	return v.isSet
}

func (v *NullableContractInvocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractInvocation(val *ContractInvocation) *NullableContractInvocation {
	return &NullableContractInvocation{value: val, isSet: true}
}

func (v NullableContractInvocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractInvocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


