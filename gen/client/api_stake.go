/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type StakeAPI interface {

	/*
	BuildStakingOperation Build a new staking operation

	Build a new staking operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiBuildStakingOperationRequest
	*/
	BuildStakingOperation(ctx context.Context) ApiBuildStakingOperationRequest

	// BuildStakingOperationExecute executes the request
	//  @return StakingOperation
	BuildStakingOperationExecute(r ApiBuildStakingOperationRequest) (*StakingOperation, *http.Response, error)

	/*
	FetchHistoricalStakingBalances Fetch historical staking balances

	Fetch historical staking balances for given address.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkId The ID of the blockchain network.
	@param addressId The onchain address for which the historical staking balances are being fetched.
	@return ApiFetchHistoricalStakingBalancesRequest
	*/
	FetchHistoricalStakingBalances(ctx context.Context, networkId string, addressId string) ApiFetchHistoricalStakingBalancesRequest

	// FetchHistoricalStakingBalancesExecute executes the request
	//  @return FetchHistoricalStakingBalances200Response
	FetchHistoricalStakingBalancesExecute(r ApiFetchHistoricalStakingBalancesRequest) (*FetchHistoricalStakingBalances200Response, *http.Response, error)

	/*
	FetchStakingRewards Fetch staking rewards

	Fetch staking rewards for a list of addresses

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchStakingRewardsRequest
	*/
	FetchStakingRewards(ctx context.Context) ApiFetchStakingRewardsRequest

	// FetchStakingRewardsExecute executes the request
	//  @return FetchStakingRewards200Response
	FetchStakingRewardsExecute(r ApiFetchStakingRewardsRequest) (*FetchStakingRewards200Response, *http.Response, error)

	/*
	GetExternalStakingOperation Get the latest state of a staking operation

	Get the latest state of a staking operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkId The ID of the blockchain network
	@param addressId The ID of the address to fetch the staking operation for
	@param stakingOperationId The ID of the staking operation
	@return ApiGetExternalStakingOperationRequest
	*/
	GetExternalStakingOperation(ctx context.Context, networkId string, addressId string, stakingOperationId string) ApiGetExternalStakingOperationRequest

	// GetExternalStakingOperationExecute executes the request
	//  @return StakingOperation
	GetExternalStakingOperationExecute(r ApiGetExternalStakingOperationRequest) (*StakingOperation, *http.Response, error)

	/*
	GetStakingContext Get staking context

	Get staking context for an address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetStakingContextRequest
	*/
	GetStakingContext(ctx context.Context) ApiGetStakingContextRequest

	// GetStakingContextExecute executes the request
	//  @return StakingContext
	GetStakingContextExecute(r ApiGetStakingContextRequest) (*StakingContext, *http.Response, error)
}

// StakeAPIService StakeAPI service
type StakeAPIService service

type ApiBuildStakingOperationRequest struct {
	ctx context.Context
	ApiService StakeAPI
	buildStakingOperationRequest *BuildStakingOperationRequest
}

func (r ApiBuildStakingOperationRequest) BuildStakingOperationRequest(buildStakingOperationRequest BuildStakingOperationRequest) ApiBuildStakingOperationRequest {
	r.buildStakingOperationRequest = &buildStakingOperationRequest
	return r
}

func (r ApiBuildStakingOperationRequest) Execute() (*StakingOperation, *http.Response, error) {
	return r.ApiService.BuildStakingOperationExecute(r)
}

/*
BuildStakingOperation Build a new staking operation

Build a new staking operation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBuildStakingOperationRequest
*/
func (a *StakeAPIService) BuildStakingOperation(ctx context.Context) ApiBuildStakingOperationRequest {
	return ApiBuildStakingOperationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StakingOperation
func (a *StakeAPIService) BuildStakingOperationExecute(r ApiBuildStakingOperationRequest) (*StakingOperation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StakingOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StakeAPIService.BuildStakingOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stake/build"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildStakingOperationRequest == nil {
		return localVarReturnValue, nil, reportError("buildStakingOperationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildStakingOperationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchHistoricalStakingBalancesRequest struct {
	ctx context.Context
	ApiService StakeAPI
	networkId string
	assetId *string
	addressId string
	startTime *time.Time
	endTime *time.Time
	limit *int32
	page *string
}

// The ID of the asset for which the historical staking balances are being fetched.
func (r ApiFetchHistoricalStakingBalancesRequest) AssetId(assetId string) ApiFetchHistoricalStakingBalancesRequest {
	r.assetId = &assetId
	return r
}

// The start time of this historical staking balance period.
func (r ApiFetchHistoricalStakingBalancesRequest) StartTime(startTime time.Time) ApiFetchHistoricalStakingBalancesRequest {
	r.startTime = &startTime
	return r
}

// The end time of this historical staking balance period.
func (r ApiFetchHistoricalStakingBalancesRequest) EndTime(endTime time.Time) ApiFetchHistoricalStakingBalancesRequest {
	r.endTime = &endTime
	return r
}

// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.
func (r ApiFetchHistoricalStakingBalancesRequest) Limit(limit int32) ApiFetchHistoricalStakingBalancesRequest {
	r.limit = &limit
	return r
}

// A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
func (r ApiFetchHistoricalStakingBalancesRequest) Page(page string) ApiFetchHistoricalStakingBalancesRequest {
	r.page = &page
	return r
}

func (r ApiFetchHistoricalStakingBalancesRequest) Execute() (*FetchHistoricalStakingBalances200Response, *http.Response, error) {
	return r.ApiService.FetchHistoricalStakingBalancesExecute(r)
}

/*
FetchHistoricalStakingBalances Fetch historical staking balances

Fetch historical staking balances for given address.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The ID of the blockchain network.
 @param addressId The onchain address for which the historical staking balances are being fetched.
 @return ApiFetchHistoricalStakingBalancesRequest
*/
func (a *StakeAPIService) FetchHistoricalStakingBalances(ctx context.Context, networkId string, addressId string) ApiFetchHistoricalStakingBalancesRequest {
	return ApiFetchHistoricalStakingBalancesRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		addressId: addressId,
	}
}

// Execute executes the request
//  @return FetchHistoricalStakingBalances200Response
func (a *StakeAPIService) FetchHistoricalStakingBalancesExecute(r ApiFetchHistoricalStakingBalancesRequest) (*FetchHistoricalStakingBalances200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchHistoricalStakingBalances200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StakeAPIService.FetchHistoricalStakingBalances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/networks/{network_id}/addresses/{address_id}/stake/balances"
	localVarPath = strings.Replace(localVarPath, "{"+"network_id"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.networkId) > 5000 {
		return localVarReturnValue, nil, reportError("networkId must have less than 5000 elements")
	}
	if r.assetId == nil {
		return localVarReturnValue, nil, reportError("assetId is required and must be specified")
	}
	if strlen(*r.assetId) > 5000 {
		return localVarReturnValue, nil, reportError("assetId must have less than 5000 elements")
	}
	if strlen(r.addressId) > 5000 {
		return localVarReturnValue, nil, reportError("addressId must have less than 5000 elements")
	}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}
	if r.endTime == nil {
		return localVarReturnValue, nil, reportError("endTime is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "asset_id", r.assetId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchStakingRewardsRequest struct {
	ctx context.Context
	ApiService StakeAPI
	fetchStakingRewardsRequest *FetchStakingRewardsRequest
	limit *int32
	page *string
}

func (r ApiFetchStakingRewardsRequest) FetchStakingRewardsRequest(fetchStakingRewardsRequest FetchStakingRewardsRequest) ApiFetchStakingRewardsRequest {
	r.fetchStakingRewardsRequest = &fetchStakingRewardsRequest
	return r
}

// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 50.
func (r ApiFetchStakingRewardsRequest) Limit(limit int32) ApiFetchStakingRewardsRequest {
	r.limit = &limit
	return r
}

// A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
func (r ApiFetchStakingRewardsRequest) Page(page string) ApiFetchStakingRewardsRequest {
	r.page = &page
	return r
}

func (r ApiFetchStakingRewardsRequest) Execute() (*FetchStakingRewards200Response, *http.Response, error) {
	return r.ApiService.FetchStakingRewardsExecute(r)
}

/*
FetchStakingRewards Fetch staking rewards

Fetch staking rewards for a list of addresses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchStakingRewardsRequest
*/
func (a *StakeAPIService) FetchStakingRewards(ctx context.Context) ApiFetchStakingRewardsRequest {
	return ApiFetchStakingRewardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchStakingRewards200Response
func (a *StakeAPIService) FetchStakingRewardsExecute(r ApiFetchStakingRewardsRequest) (*FetchStakingRewards200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchStakingRewards200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StakeAPIService.FetchStakingRewards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stake/rewards/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fetchStakingRewardsRequest == nil {
		return localVarReturnValue, nil, reportError("fetchStakingRewardsRequest is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fetchStakingRewardsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExternalStakingOperationRequest struct {
	ctx context.Context
	ApiService StakeAPI
	networkId string
	addressId string
	stakingOperationId string
}

func (r ApiGetExternalStakingOperationRequest) Execute() (*StakingOperation, *http.Response, error) {
	return r.ApiService.GetExternalStakingOperationExecute(r)
}

/*
GetExternalStakingOperation Get the latest state of a staking operation

Get the latest state of a staking operation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The ID of the blockchain network
 @param addressId The ID of the address to fetch the staking operation for
 @param stakingOperationId The ID of the staking operation
 @return ApiGetExternalStakingOperationRequest
*/
func (a *StakeAPIService) GetExternalStakingOperation(ctx context.Context, networkId string, addressId string, stakingOperationId string) ApiGetExternalStakingOperationRequest {
	return ApiGetExternalStakingOperationRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		addressId: addressId,
		stakingOperationId: stakingOperationId,
	}
}

// Execute executes the request
//  @return StakingOperation
func (a *StakeAPIService) GetExternalStakingOperationExecute(r ApiGetExternalStakingOperationRequest) (*StakingOperation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StakingOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StakeAPIService.GetExternalStakingOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/networks/{network_id}/addresses/{address_id}/staking_operations/{staking_operation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"network_id"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"staking_operation_id"+"}", url.PathEscape(parameterValueToString(r.stakingOperationId, "stakingOperationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetStakingContextRequest struct {
	ctx context.Context
	ApiService StakeAPI
	getStakingContextRequest *GetStakingContextRequest
}

func (r ApiGetStakingContextRequest) GetStakingContextRequest(getStakingContextRequest GetStakingContextRequest) ApiGetStakingContextRequest {
	r.getStakingContextRequest = &getStakingContextRequest
	return r
}

func (r ApiGetStakingContextRequest) Execute() (*StakingContext, *http.Response, error) {
	return r.ApiService.GetStakingContextExecute(r)
}

/*
GetStakingContext Get staking context

Get staking context for an address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetStakingContextRequest
*/
func (a *StakeAPIService) GetStakingContext(ctx context.Context) ApiGetStakingContextRequest {
	return ApiGetStakingContextRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StakingContext
func (a *StakeAPIService) GetStakingContextExecute(r ApiGetStakingContextRequest) (*StakingContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StakingContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StakeAPIService.GetStakingContext")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stake/context"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getStakingContextRequest == nil {
		return localVarReturnValue, nil, reportError("getStakingContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getStakingContextRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
