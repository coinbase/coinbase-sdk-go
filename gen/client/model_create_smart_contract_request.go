/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateSmartContractRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSmartContractRequest{}

// CreateSmartContractRequest struct for CreateSmartContractRequest
type CreateSmartContractRequest struct {
	Type SmartContractType `json:"type"`
	Options SmartContractOptions `json:"options"`
}

type _CreateSmartContractRequest CreateSmartContractRequest

// NewCreateSmartContractRequest instantiates a new CreateSmartContractRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSmartContractRequest(type_ SmartContractType, options SmartContractOptions) *CreateSmartContractRequest {
	this := CreateSmartContractRequest{}
	this.Type = type_
	this.Options = options
	return &this
}

// NewCreateSmartContractRequestWithDefaults instantiates a new CreateSmartContractRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSmartContractRequestWithDefaults() *CreateSmartContractRequest {
	this := CreateSmartContractRequest{}
	return &this
}

// GetType returns the Type field value
func (o *CreateSmartContractRequest) GetType() SmartContractType {
	if o == nil {
		var ret SmartContractType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateSmartContractRequest) GetTypeOk() (*SmartContractType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateSmartContractRequest) SetType(v SmartContractType) {
	o.Type = v
}

// GetOptions returns the Options field value
func (o *CreateSmartContractRequest) GetOptions() SmartContractOptions {
	if o == nil {
		var ret SmartContractOptions
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *CreateSmartContractRequest) GetOptionsOk() (*SmartContractOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *CreateSmartContractRequest) SetOptions(v SmartContractOptions) {
	o.Options = v
}

func (o CreateSmartContractRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSmartContractRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["options"] = o.Options
	return toSerialize, nil
}

func (o *CreateSmartContractRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"options",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSmartContractRequest := _CreateSmartContractRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSmartContractRequest)

	if err != nil {
		return err
	}

	*o = CreateSmartContractRequest(varCreateSmartContractRequest)

	return err
}

type NullableCreateSmartContractRequest struct {
	value *CreateSmartContractRequest
	isSet bool
}

func (v NullableCreateSmartContractRequest) Get() *CreateSmartContractRequest {
	return v.value
}

func (v *NullableCreateSmartContractRequest) Set(val *CreateSmartContractRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSmartContractRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSmartContractRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSmartContractRequest(val *CreateSmartContractRequest) *NullableCreateSmartContractRequest {
	return &NullableCreateSmartContractRequest{value: val, isSet: true}
}

func (v NullableCreateSmartContractRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSmartContractRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


