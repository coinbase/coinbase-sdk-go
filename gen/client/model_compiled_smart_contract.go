/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CompiledSmartContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompiledSmartContract{}

// CompiledSmartContract Represents a compiled smart contract that can be deployed onchain
type CompiledSmartContract struct {
	// The unique identifier of the compiled smart contract.
	CompiledSmartContractId *string `json:"compiled_smart_contract_id,omitempty"`
	// The JSON-encoded input for the Solidity compiler
	SolidityInputJson *string `json:"solidity_input_json,omitempty"`
	// The contract creation bytecode which will be used with constructor arguments to deploy the contract
	ContractCreationBytecode *string `json:"contract_creation_bytecode,omitempty"`
	// The JSON-encoded ABI of the contract
	Abi *string `json:"abi,omitempty"`
	// The name of the smart contract to deploy
	ContractName *string `json:"contract_name,omitempty"`
}

// NewCompiledSmartContract instantiates a new CompiledSmartContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompiledSmartContract() *CompiledSmartContract {
	this := CompiledSmartContract{}
	return &this
}

// NewCompiledSmartContractWithDefaults instantiates a new CompiledSmartContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompiledSmartContractWithDefaults() *CompiledSmartContract {
	this := CompiledSmartContract{}
	return &this
}

// GetCompiledSmartContractId returns the CompiledSmartContractId field value if set, zero value otherwise.
func (o *CompiledSmartContract) GetCompiledSmartContractId() string {
	if o == nil || IsNil(o.CompiledSmartContractId) {
		var ret string
		return ret
	}
	return *o.CompiledSmartContractId
}

// GetCompiledSmartContractIdOk returns a tuple with the CompiledSmartContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompiledSmartContract) GetCompiledSmartContractIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompiledSmartContractId) {
		return nil, false
	}
	return o.CompiledSmartContractId, true
}

// HasCompiledSmartContractId returns a boolean if a field has been set.
func (o *CompiledSmartContract) HasCompiledSmartContractId() bool {
	if o != nil && !IsNil(o.CompiledSmartContractId) {
		return true
	}

	return false
}

// SetCompiledSmartContractId gets a reference to the given string and assigns it to the CompiledSmartContractId field.
func (o *CompiledSmartContract) SetCompiledSmartContractId(v string) {
	o.CompiledSmartContractId = &v
}

// GetSolidityInputJson returns the SolidityInputJson field value if set, zero value otherwise.
func (o *CompiledSmartContract) GetSolidityInputJson() string {
	if o == nil || IsNil(o.SolidityInputJson) {
		var ret string
		return ret
	}
	return *o.SolidityInputJson
}

// GetSolidityInputJsonOk returns a tuple with the SolidityInputJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompiledSmartContract) GetSolidityInputJsonOk() (*string, bool) {
	if o == nil || IsNil(o.SolidityInputJson) {
		return nil, false
	}
	return o.SolidityInputJson, true
}

// HasSolidityInputJson returns a boolean if a field has been set.
func (o *CompiledSmartContract) HasSolidityInputJson() bool {
	if o != nil && !IsNil(o.SolidityInputJson) {
		return true
	}

	return false
}

// SetSolidityInputJson gets a reference to the given string and assigns it to the SolidityInputJson field.
func (o *CompiledSmartContract) SetSolidityInputJson(v string) {
	o.SolidityInputJson = &v
}

// GetContractCreationBytecode returns the ContractCreationBytecode field value if set, zero value otherwise.
func (o *CompiledSmartContract) GetContractCreationBytecode() string {
	if o == nil || IsNil(o.ContractCreationBytecode) {
		var ret string
		return ret
	}
	return *o.ContractCreationBytecode
}

// GetContractCreationBytecodeOk returns a tuple with the ContractCreationBytecode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompiledSmartContract) GetContractCreationBytecodeOk() (*string, bool) {
	if o == nil || IsNil(o.ContractCreationBytecode) {
		return nil, false
	}
	return o.ContractCreationBytecode, true
}

// HasContractCreationBytecode returns a boolean if a field has been set.
func (o *CompiledSmartContract) HasContractCreationBytecode() bool {
	if o != nil && !IsNil(o.ContractCreationBytecode) {
		return true
	}

	return false
}

// SetContractCreationBytecode gets a reference to the given string and assigns it to the ContractCreationBytecode field.
func (o *CompiledSmartContract) SetContractCreationBytecode(v string) {
	o.ContractCreationBytecode = &v
}

// GetAbi returns the Abi field value if set, zero value otherwise.
func (o *CompiledSmartContract) GetAbi() string {
	if o == nil || IsNil(o.Abi) {
		var ret string
		return ret
	}
	return *o.Abi
}

// GetAbiOk returns a tuple with the Abi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompiledSmartContract) GetAbiOk() (*string, bool) {
	if o == nil || IsNil(o.Abi) {
		return nil, false
	}
	return o.Abi, true
}

// HasAbi returns a boolean if a field has been set.
func (o *CompiledSmartContract) HasAbi() bool {
	if o != nil && !IsNil(o.Abi) {
		return true
	}

	return false
}

// SetAbi gets a reference to the given string and assigns it to the Abi field.
func (o *CompiledSmartContract) SetAbi(v string) {
	o.Abi = &v
}

// GetContractName returns the ContractName field value if set, zero value otherwise.
func (o *CompiledSmartContract) GetContractName() string {
	if o == nil || IsNil(o.ContractName) {
		var ret string
		return ret
	}
	return *o.ContractName
}

// GetContractNameOk returns a tuple with the ContractName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompiledSmartContract) GetContractNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContractName) {
		return nil, false
	}
	return o.ContractName, true
}

// HasContractName returns a boolean if a field has been set.
func (o *CompiledSmartContract) HasContractName() bool {
	if o != nil && !IsNil(o.ContractName) {
		return true
	}

	return false
}

// SetContractName gets a reference to the given string and assigns it to the ContractName field.
func (o *CompiledSmartContract) SetContractName(v string) {
	o.ContractName = &v
}

func (o CompiledSmartContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompiledSmartContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompiledSmartContractId) {
		toSerialize["compiled_smart_contract_id"] = o.CompiledSmartContractId
	}
	if !IsNil(o.SolidityInputJson) {
		toSerialize["solidity_input_json"] = o.SolidityInputJson
	}
	if !IsNil(o.ContractCreationBytecode) {
		toSerialize["contract_creation_bytecode"] = o.ContractCreationBytecode
	}
	if !IsNil(o.Abi) {
		toSerialize["abi"] = o.Abi
	}
	if !IsNil(o.ContractName) {
		toSerialize["contract_name"] = o.ContractName
	}
	return toSerialize, nil
}

type NullableCompiledSmartContract struct {
	value *CompiledSmartContract
	isSet bool
}

func (v NullableCompiledSmartContract) Get() *CompiledSmartContract {
	return v.value
}

func (v *NullableCompiledSmartContract) Set(val *CompiledSmartContract) {
	v.value = val
	v.isSet = true
}

func (v NullableCompiledSmartContract) IsSet() bool {
	return v.isSet
}

func (v *NullableCompiledSmartContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompiledSmartContract(val *CompiledSmartContract) *NullableCompiledSmartContract {
	return &NullableCompiledSmartContract{value: val, isSet: true}
}

func (v NullableCompiledSmartContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompiledSmartContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


