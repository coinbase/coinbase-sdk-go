/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the EthereumTransactionAccessList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthereumTransactionAccessList{}

// EthereumTransactionAccessList struct for EthereumTransactionAccessList
type EthereumTransactionAccessList struct {
	AccessList []EthereumTransactionAccess `json:"access_list,omitempty"`
}

// NewEthereumTransactionAccessList instantiates a new EthereumTransactionAccessList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthereumTransactionAccessList() *EthereumTransactionAccessList {
	this := EthereumTransactionAccessList{}
	return &this
}

// NewEthereumTransactionAccessListWithDefaults instantiates a new EthereumTransactionAccessList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthereumTransactionAccessListWithDefaults() *EthereumTransactionAccessList {
	this := EthereumTransactionAccessList{}
	return &this
}

// GetAccessList returns the AccessList field value if set, zero value otherwise.
func (o *EthereumTransactionAccessList) GetAccessList() []EthereumTransactionAccess {
	if o == nil || IsNil(o.AccessList) {
		var ret []EthereumTransactionAccess
		return ret
	}
	return o.AccessList
}

// GetAccessListOk returns a tuple with the AccessList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthereumTransactionAccessList) GetAccessListOk() ([]EthereumTransactionAccess, bool) {
	if o == nil || IsNil(o.AccessList) {
		return nil, false
	}
	return o.AccessList, true
}

// HasAccessList returns a boolean if a field has been set.
func (o *EthereumTransactionAccessList) HasAccessList() bool {
	if o != nil && !IsNil(o.AccessList) {
		return true
	}

	return false
}

// SetAccessList gets a reference to the given []EthereumTransactionAccess and assigns it to the AccessList field.
func (o *EthereumTransactionAccessList) SetAccessList(v []EthereumTransactionAccess) {
	o.AccessList = v
}

func (o EthereumTransactionAccessList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthereumTransactionAccessList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessList) {
		toSerialize["access_list"] = o.AccessList
	}
	return toSerialize, nil
}

type NullableEthereumTransactionAccessList struct {
	value *EthereumTransactionAccessList
	isSet bool
}

func (v NullableEthereumTransactionAccessList) Get() *EthereumTransactionAccessList {
	return v.value
}

func (v *NullableEthereumTransactionAccessList) Set(val *EthereumTransactionAccessList) {
	v.value = val
	v.isSet = true
}

func (v NullableEthereumTransactionAccessList) IsSet() bool {
	return v.isSet
}

func (v *NullableEthereumTransactionAccessList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthereumTransactionAccessList(val *EthereumTransactionAccessList) *NullableEthereumTransactionAccessList {
	return &NullableEthereumTransactionAccessList{value: val, isSet: true}
}

func (v NullableEthereumTransactionAccessList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthereumTransactionAccessList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


