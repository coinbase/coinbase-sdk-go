/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressReputation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressReputation{}

// AddressReputation The reputation score with metadata of a blockchain address.
type AddressReputation struct {
	// The reputation score of a wallet address which lie between 0 to 100.
	ReputationScore *int32 `json:"reputation_score,omitempty"`
	Metadata AddressReputationMetadata `json:"metadata"`
}

type _AddressReputation AddressReputation

// NewAddressReputation instantiates a new AddressReputation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressReputation(metadata AddressReputationMetadata) *AddressReputation {
	this := AddressReputation{}
	this.Metadata = metadata
	return &this
}

// NewAddressReputationWithDefaults instantiates a new AddressReputation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressReputationWithDefaults() *AddressReputation {
	this := AddressReputation{}
	return &this
}

// GetReputationScore returns the ReputationScore field value if set, zero value otherwise.
func (o *AddressReputation) GetReputationScore() int32 {
	if o == nil || IsNil(o.ReputationScore) {
		var ret int32
		return ret
	}
	return *o.ReputationScore
}

// GetReputationScoreOk returns a tuple with the ReputationScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressReputation) GetReputationScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.ReputationScore) {
		return nil, false
	}
	return o.ReputationScore, true
}

// HasReputationScore returns a boolean if a field has been set.
func (o *AddressReputation) HasReputationScore() bool {
	if o != nil && !IsNil(o.ReputationScore) {
		return true
	}

	return false
}

// SetReputationScore gets a reference to the given int32 and assigns it to the ReputationScore field.
func (o *AddressReputation) SetReputationScore(v int32) {
	o.ReputationScore = &v
}

// GetMetadata returns the Metadata field value
func (o *AddressReputation) GetMetadata() AddressReputationMetadata {
	if o == nil {
		var ret AddressReputationMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *AddressReputation) GetMetadataOk() (*AddressReputationMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *AddressReputation) SetMetadata(v AddressReputationMetadata) {
	o.Metadata = v
}

func (o AddressReputation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressReputation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReputationScore) {
		toSerialize["reputation_score"] = o.ReputationScore
	}
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *AddressReputation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressReputation := _AddressReputation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressReputation)

	if err != nil {
		return err
	}

	*o = AddressReputation(varAddressReputation)

	return err
}

type NullableAddressReputation struct {
	value *AddressReputation
	isSet bool
}

func (v NullableAddressReputation) Get() *AddressReputation {
	return v.value
}

func (v *NullableAddressReputation) Set(val *AddressReputation) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressReputation) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressReputation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressReputation(val *AddressReputation) *NullableAddressReputation {
	return &NullableAddressReputation{value: val, isSet: true}
}

func (v NullableAddressReputation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressReputation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


