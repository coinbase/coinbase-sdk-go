/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type OnchainIdentityAPI interface {

	/*
	ResolveIdentityByAddress Obtains onchain identity for an address on a specific network

	Obtains onchain identity for an address on a specific network

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkId The ID of the blockchain network
	@param addressId The ID of the address to fetch the identity for
	@return ApiResolveIdentityByAddressRequest
	*/
	ResolveIdentityByAddress(ctx context.Context, networkId string, addressId string) ApiResolveIdentityByAddressRequest

	// ResolveIdentityByAddressExecute executes the request
	//  @return OnchainNameList
	ResolveIdentityByAddressExecute(r ApiResolveIdentityByAddressRequest) (*OnchainNameList, *http.Response, error)
}

// OnchainIdentityAPIService OnchainIdentityAPI service
type OnchainIdentityAPIService service

type ApiResolveIdentityByAddressRequest struct {
	ctx context.Context
	ApiService OnchainIdentityAPI
	networkId string
	addressId string
	roles *[]string
	limit *int32
	page *string
}

// A filter by role of the names related to this address (managed or owned)
func (r ApiResolveIdentityByAddressRequest) Roles(roles []string) ApiResolveIdentityByAddressRequest {
	r.roles = &roles
	return r
}

// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
func (r ApiResolveIdentityByAddressRequest) Limit(limit int32) ApiResolveIdentityByAddressRequest {
	r.limit = &limit
	return r
}

// A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
func (r ApiResolveIdentityByAddressRequest) Page(page string) ApiResolveIdentityByAddressRequest {
	r.page = &page
	return r
}

func (r ApiResolveIdentityByAddressRequest) Execute() (*OnchainNameList, *http.Response, error) {
	return r.ApiService.ResolveIdentityByAddressExecute(r)
}

/*
ResolveIdentityByAddress Obtains onchain identity for an address on a specific network

Obtains onchain identity for an address on a specific network

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The ID of the blockchain network
 @param addressId The ID of the address to fetch the identity for
 @return ApiResolveIdentityByAddressRequest
*/
func (a *OnchainIdentityAPIService) ResolveIdentityByAddress(ctx context.Context, networkId string, addressId string) ApiResolveIdentityByAddressRequest {
	return ApiResolveIdentityByAddressRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		addressId: addressId,
	}
}

// Execute executes the request
//  @return OnchainNameList
func (a *OnchainIdentityAPIService) ResolveIdentityByAddressExecute(r ApiResolveIdentityByAddressRequest) (*OnchainNameList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OnchainNameList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnchainIdentityAPIService.ResolveIdentityByAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/networks/{network_id}/addresses/{address_id}/identity"
	localVarPath = strings.Replace(localVarPath, "{"+"network_id"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.roles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roles", r.roles, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
