/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction An onchain transaction.
type Transaction struct {
	// The ID of the blockchain network.
	NetworkId string `json:"network_id"`
	// The hash of the block at which the transaction was recorded.
	BlockHash *string `json:"block_hash,omitempty"`
	// The block height at which the transaction was recorded.
	BlockHeight *string `json:"block_height,omitempty"`
	// The onchain address of the sender.
	FromAddressId string `json:"from_address_id"`
	// The onchain address of the recipient.
	ToAddressId *string `json:"to_address_id,omitempty"`
	// The unsigned payload of the transaction. This is the payload that needs to be signed by the sender.
	UnsignedPayload string `json:"unsigned_payload"`
	// The signed payload of the transaction. This is the payload that has been signed by the sender.
	SignedPayload *string `json:"signed_payload,omitempty"`
	// The hash of the transaction.
	TransactionHash *string `json:"transaction_hash,omitempty"`
	// The link to view the transaction on a block explorer. This is optional and may not be present for all transactions.
	TransactionLink *string `json:"transaction_link,omitempty"`
	// The status of the transaction.
	Status string `json:"status"`
	Content *TransactionContent `json:"content,omitempty"`
}

type _Transaction Transaction

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(networkId string, fromAddressId string, unsignedPayload string, status string) *Transaction {
	this := Transaction{}
	this.NetworkId = networkId
	this.FromAddressId = fromAddressId
	this.UnsignedPayload = unsignedPayload
	this.Status = status
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetNetworkId returns the NetworkId field value
func (o *Transaction) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *Transaction) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *Transaction) GetBlockHash() string {
	if o == nil || IsNil(o.BlockHash) {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlockHashOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHash) {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *Transaction) HasBlockHash() bool {
	if o != nil && !IsNil(o.BlockHash) {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *Transaction) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetBlockHeight returns the BlockHeight field value if set, zero value otherwise.
func (o *Transaction) GetBlockHeight() string {
	if o == nil || IsNil(o.BlockHeight) {
		var ret string
		return ret
	}
	return *o.BlockHeight
}

// GetBlockHeightOk returns a tuple with the BlockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlockHeightOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHeight) {
		return nil, false
	}
	return o.BlockHeight, true
}

// HasBlockHeight returns a boolean if a field has been set.
func (o *Transaction) HasBlockHeight() bool {
	if o != nil && !IsNil(o.BlockHeight) {
		return true
	}

	return false
}

// SetBlockHeight gets a reference to the given string and assigns it to the BlockHeight field.
func (o *Transaction) SetBlockHeight(v string) {
	o.BlockHeight = &v
}

// GetFromAddressId returns the FromAddressId field value
func (o *Transaction) GetFromAddressId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAddressId
}

// GetFromAddressIdOk returns a tuple with the FromAddressId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetFromAddressIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddressId, true
}

// SetFromAddressId sets field value
func (o *Transaction) SetFromAddressId(v string) {
	o.FromAddressId = v
}

// GetToAddressId returns the ToAddressId field value if set, zero value otherwise.
func (o *Transaction) GetToAddressId() string {
	if o == nil || IsNil(o.ToAddressId) {
		var ret string
		return ret
	}
	return *o.ToAddressId
}

// GetToAddressIdOk returns a tuple with the ToAddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetToAddressIdOk() (*string, bool) {
	if o == nil || IsNil(o.ToAddressId) {
		return nil, false
	}
	return o.ToAddressId, true
}

// HasToAddressId returns a boolean if a field has been set.
func (o *Transaction) HasToAddressId() bool {
	if o != nil && !IsNil(o.ToAddressId) {
		return true
	}

	return false
}

// SetToAddressId gets a reference to the given string and assigns it to the ToAddressId field.
func (o *Transaction) SetToAddressId(v string) {
	o.ToAddressId = &v
}

// GetUnsignedPayload returns the UnsignedPayload field value
func (o *Transaction) GetUnsignedPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnsignedPayload
}

// GetUnsignedPayloadOk returns a tuple with the UnsignedPayload field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetUnsignedPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnsignedPayload, true
}

// SetUnsignedPayload sets field value
func (o *Transaction) SetUnsignedPayload(v string) {
	o.UnsignedPayload = v
}

// GetSignedPayload returns the SignedPayload field value if set, zero value otherwise.
func (o *Transaction) GetSignedPayload() string {
	if o == nil || IsNil(o.SignedPayload) {
		var ret string
		return ret
	}
	return *o.SignedPayload
}

// GetSignedPayloadOk returns a tuple with the SignedPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSignedPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.SignedPayload) {
		return nil, false
	}
	return o.SignedPayload, true
}

// HasSignedPayload returns a boolean if a field has been set.
func (o *Transaction) HasSignedPayload() bool {
	if o != nil && !IsNil(o.SignedPayload) {
		return true
	}

	return false
}

// SetSignedPayload gets a reference to the given string and assigns it to the SignedPayload field.
func (o *Transaction) SetSignedPayload(v string) {
	o.SignedPayload = &v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *Transaction) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash) {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionHash) {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *Transaction) HasTransactionHash() bool {
	if o != nil && !IsNil(o.TransactionHash) {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
func (o *Transaction) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

// GetTransactionLink returns the TransactionLink field value if set, zero value otherwise.
func (o *Transaction) GetTransactionLink() string {
	if o == nil || IsNil(o.TransactionLink) {
		var ret string
		return ret
	}
	return *o.TransactionLink
}

// GetTransactionLinkOk returns a tuple with the TransactionLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionLinkOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionLink) {
		return nil, false
	}
	return o.TransactionLink, true
}

// HasTransactionLink returns a boolean if a field has been set.
func (o *Transaction) HasTransactionLink() bool {
	if o != nil && !IsNil(o.TransactionLink) {
		return true
	}

	return false
}

// SetTransactionLink gets a reference to the given string and assigns it to the TransactionLink field.
func (o *Transaction) SetTransactionLink(v string) {
	o.TransactionLink = &v
}

// GetStatus returns the Status field value
func (o *Transaction) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Transaction) SetStatus(v string) {
	o.Status = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Transaction) GetContent() TransactionContent {
	if o == nil || IsNil(o.Content) {
		var ret TransactionContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetContentOk() (*TransactionContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Transaction) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given TransactionContent and assigns it to the Content field.
func (o *Transaction) SetContent(v TransactionContent) {
	o.Content = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network_id"] = o.NetworkId
	if !IsNil(o.BlockHash) {
		toSerialize["block_hash"] = o.BlockHash
	}
	if !IsNil(o.BlockHeight) {
		toSerialize["block_height"] = o.BlockHeight
	}
	toSerialize["from_address_id"] = o.FromAddressId
	if !IsNil(o.ToAddressId) {
		toSerialize["to_address_id"] = o.ToAddressId
	}
	toSerialize["unsigned_payload"] = o.UnsignedPayload
	if !IsNil(o.SignedPayload) {
		toSerialize["signed_payload"] = o.SignedPayload
	}
	if !IsNil(o.TransactionHash) {
		toSerialize["transaction_hash"] = o.TransactionHash
	}
	if !IsNil(o.TransactionLink) {
		toSerialize["transaction_link"] = o.TransactionLink
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

func (o *Transaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_id",
		"from_address_id",
		"unsigned_payload",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransaction := _Transaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransaction)

	if err != nil {
		return err
	}

	*o = Transaction(varTransaction)

	return err
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


