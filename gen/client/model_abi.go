/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ABI type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ABI{}

// ABI Smart Contract to be registered
type ABI struct {
	// ABI of the smart contract
	Abi string `json:"abi"`
	// Name of the smart contract
	ContractName string `json:"contract_name"`
}

type _ABI ABI

// NewABI instantiates a new ABI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewABI(abi string, contractName string) *ABI {
	this := ABI{}
	this.Abi = abi
	this.ContractName = contractName
	return &this
}

// NewABIWithDefaults instantiates a new ABI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewABIWithDefaults() *ABI {
	this := ABI{}
	return &this
}

// GetAbi returns the Abi field value
func (o *ABI) GetAbi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Abi
}

// GetAbiOk returns a tuple with the Abi field value
// and a boolean to check if the value has been set.
func (o *ABI) GetAbiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Abi, true
}

// SetAbi sets field value
func (o *ABI) SetAbi(v string) {
	o.Abi = v
}

// GetContractName returns the ContractName field value
func (o *ABI) GetContractName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractName
}

// GetContractNameOk returns a tuple with the ContractName field value
// and a boolean to check if the value has been set.
func (o *ABI) GetContractNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractName, true
}

// SetContractName sets field value
func (o *ABI) SetContractName(v string) {
	o.ContractName = v
}

func (o ABI) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ABI) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["abi"] = o.Abi
	toSerialize["contract_name"] = o.ContractName
	return toSerialize, nil
}

func (o *ABI) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"abi",
		"contract_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varABI := _ABI{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varABI)

	if err != nil {
		return err
	}

	*o = ABI(varABI)

	return err
}

type NullableABI struct {
	value *ABI
	isSet bool
}

func (v NullableABI) Get() *ABI {
	return v.value
}

func (v *NullableABI) Set(val *ABI) {
	v.value = val
	v.isSet = true
}

func (v NullableABI) IsSet() bool {
	return v.isSet
}

func (v *NullableABI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableABI(val *ABI) *NullableABI {
	return &NullableABI{value: val, isSet: true}
}

func (v NullableABI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableABI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


