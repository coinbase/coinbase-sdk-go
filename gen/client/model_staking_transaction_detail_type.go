/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// StakingTransactionDetailType The type of the staking transaction.
type StakingTransactionDetailType string

// List of StakingTransactionDetailType
const (
	STAKINGTRANSACTIONDETAILTYPE_PARTIAL_ETH StakingTransactionDetailType = "PartialEth"
	STAKINGTRANSACTIONDETAILTYPE_DEDICATED_ETH_STAKE StakingTransactionDetailType = "DedicatedEthStake"
	STAKINGTRANSACTIONDETAILTYPE_DEDICATED_ETH_UNSTAKE StakingTransactionDetailType = "DedicatedEthUnstake"
	STAKINGTRANSACTIONDETAILTYPE_SOLANA StakingTransactionDetailType = "Solana"
)

// All allowed values of StakingTransactionDetailType enum
var AllowedStakingTransactionDetailTypeEnumValues = []StakingTransactionDetailType{
	"PartialEth",
	"DedicatedEthStake",
	"DedicatedEthUnstake",
	"Solana",
}

func (v *StakingTransactionDetailType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StakingTransactionDetailType(value)
	for _, existing := range AllowedStakingTransactionDetailTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StakingTransactionDetailType", value)
}

// NewStakingTransactionDetailTypeFromValue returns a pointer to a valid StakingTransactionDetailType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStakingTransactionDetailTypeFromValue(v string) (*StakingTransactionDetailType, error) {
	ev := StakingTransactionDetailType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StakingTransactionDetailType: valid values are %v", v, AllowedStakingTransactionDetailTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StakingTransactionDetailType) IsValid() bool {
	for _, existing := range AllowedStakingTransactionDetailTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StakingTransactionDetailType value
func (v StakingTransactionDetailType) Ptr() *StakingTransactionDetailType {
	return &v
}

type NullableStakingTransactionDetailType struct {
	value *StakingTransactionDetailType
	isSet bool
}

func (v NullableStakingTransactionDetailType) Get() *StakingTransactionDetailType {
	return v.value
}

func (v *NullableStakingTransactionDetailType) Set(val *StakingTransactionDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingTransactionDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingTransactionDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingTransactionDetailType(val *StakingTransactionDetailType) *NullableStakingTransactionDetailType {
	return &NullableStakingTransactionDetailType{value: val, isSet: true}
}

func (v NullableStakingTransactionDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingTransactionDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

