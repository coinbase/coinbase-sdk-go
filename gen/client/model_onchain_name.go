/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the OnchainName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnchainName{}

// OnchainName A representation of an onchain stored name from name systems i.e. ENS or Basenames
type OnchainName struct {
	// The ID for the NFT related to this name
	TokenId string `json:"token_id"`
	// The onchain address of the owner of the name
	OwnerAddress string `json:"owner_address"`
	// The onchain address of the manager of the name
	ManagerAddress string `json:"manager_address"`
	// The primary onchain address of the name
	PrimaryAddress *string `json:"primary_address,omitempty"`
	// The readable format for the name in complete form
	Domain string `json:"domain"`
	// The visual representation attached to this name
	Avatar *string `json:"avatar,omitempty"`
	// The ID of the blockchain network
	NetworkId string `json:"network_id"`
	// The expiration date for this name's ownership
	ExpiresAt time.Time `json:"expires_at"`
	// The metadata attached to this name
	TextRecords *map[string]string `json:"text_records,omitempty"`
	// Whether this name is the primary name for the owner (This is when the ETH coin address for this name is equal to the primary_address. More info here https://docs.ens.domains/ensip/19)
	IsPrimary bool `json:"is_primary"`
}

type _OnchainName OnchainName

// NewOnchainName instantiates a new OnchainName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnchainName(tokenId string, ownerAddress string, managerAddress string, domain string, networkId string, expiresAt time.Time, isPrimary bool) *OnchainName {
	this := OnchainName{}
	this.TokenId = tokenId
	this.OwnerAddress = ownerAddress
	this.ManagerAddress = managerAddress
	this.Domain = domain
	this.NetworkId = networkId
	this.ExpiresAt = expiresAt
	this.IsPrimary = isPrimary
	return &this
}

// NewOnchainNameWithDefaults instantiates a new OnchainName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnchainNameWithDefaults() *OnchainName {
	this := OnchainName{}
	return &this
}

// GetTokenId returns the TokenId field value
func (o *OnchainName) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *OnchainName) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *OnchainName) SetTokenId(v string) {
	o.TokenId = v
}

// GetOwnerAddress returns the OwnerAddress field value
func (o *OnchainName) GetOwnerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerAddress
}

// GetOwnerAddressOk returns a tuple with the OwnerAddress field value
// and a boolean to check if the value has been set.
func (o *OnchainName) GetOwnerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerAddress, true
}

// SetOwnerAddress sets field value
func (o *OnchainName) SetOwnerAddress(v string) {
	o.OwnerAddress = v
}

// GetManagerAddress returns the ManagerAddress field value
func (o *OnchainName) GetManagerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagerAddress
}

// GetManagerAddressOk returns a tuple with the ManagerAddress field value
// and a boolean to check if the value has been set.
func (o *OnchainName) GetManagerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagerAddress, true
}

// SetManagerAddress sets field value
func (o *OnchainName) SetManagerAddress(v string) {
	o.ManagerAddress = v
}

// GetPrimaryAddress returns the PrimaryAddress field value if set, zero value otherwise.
func (o *OnchainName) GetPrimaryAddress() string {
	if o == nil || IsNil(o.PrimaryAddress) {
		var ret string
		return ret
	}
	return *o.PrimaryAddress
}

// GetPrimaryAddressOk returns a tuple with the PrimaryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnchainName) GetPrimaryAddressOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryAddress) {
		return nil, false
	}
	return o.PrimaryAddress, true
}

// HasPrimaryAddress returns a boolean if a field has been set.
func (o *OnchainName) HasPrimaryAddress() bool {
	if o != nil && !IsNil(o.PrimaryAddress) {
		return true
	}

	return false
}

// SetPrimaryAddress gets a reference to the given string and assigns it to the PrimaryAddress field.
func (o *OnchainName) SetPrimaryAddress(v string) {
	o.PrimaryAddress = &v
}

// GetDomain returns the Domain field value
func (o *OnchainName) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *OnchainName) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *OnchainName) SetDomain(v string) {
	o.Domain = v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *OnchainName) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnchainName) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *OnchainName) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *OnchainName) SetAvatar(v string) {
	o.Avatar = &v
}

// GetNetworkId returns the NetworkId field value
func (o *OnchainName) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *OnchainName) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *OnchainName) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *OnchainName) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *OnchainName) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *OnchainName) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetTextRecords returns the TextRecords field value if set, zero value otherwise.
func (o *OnchainName) GetTextRecords() map[string]string {
	if o == nil || IsNil(o.TextRecords) {
		var ret map[string]string
		return ret
	}
	return *o.TextRecords
}

// GetTextRecordsOk returns a tuple with the TextRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnchainName) GetTextRecordsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TextRecords) {
		return nil, false
	}
	return o.TextRecords, true
}

// HasTextRecords returns a boolean if a field has been set.
func (o *OnchainName) HasTextRecords() bool {
	if o != nil && !IsNil(o.TextRecords) {
		return true
	}

	return false
}

// SetTextRecords gets a reference to the given map[string]string and assigns it to the TextRecords field.
func (o *OnchainName) SetTextRecords(v map[string]string) {
	o.TextRecords = &v
}

// GetIsPrimary returns the IsPrimary field value
func (o *OnchainName) GetIsPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrimary
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value
// and a boolean to check if the value has been set.
func (o *OnchainName) GetIsPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrimary, true
}

// SetIsPrimary sets field value
func (o *OnchainName) SetIsPrimary(v bool) {
	o.IsPrimary = v
}

func (o OnchainName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnchainName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_id"] = o.TokenId
	toSerialize["owner_address"] = o.OwnerAddress
	toSerialize["manager_address"] = o.ManagerAddress
	if !IsNil(o.PrimaryAddress) {
		toSerialize["primary_address"] = o.PrimaryAddress
	}
	toSerialize["domain"] = o.Domain
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	toSerialize["network_id"] = o.NetworkId
	toSerialize["expires_at"] = o.ExpiresAt
	if !IsNil(o.TextRecords) {
		toSerialize["text_records"] = o.TextRecords
	}
	toSerialize["is_primary"] = o.IsPrimary
	return toSerialize, nil
}

func (o *OnchainName) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_id",
		"owner_address",
		"manager_address",
		"domain",
		"network_id",
		"expires_at",
		"is_primary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnchainName := _OnchainName{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnchainName)

	if err != nil {
		return err
	}

	*o = OnchainName(varOnchainName)

	return err
}

type NullableOnchainName struct {
	value *OnchainName
	isSet bool
}

func (v NullableOnchainName) Get() *OnchainName {
	return v.value
}

func (v *NullableOnchainName) Set(val *OnchainName) {
	v.value = val
	v.isSet = true
}

func (v NullableOnchainName) IsSet() bool {
	return v.isSet
}

func (v *NullableOnchainName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnchainName(val *OnchainName) *NullableOnchainName {
	return &NullableOnchainName{value: val, isSet: true}
}

func (v NullableOnchainName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnchainName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


