/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SmartContractType The type of the smart contract.
type SmartContractType string

// List of SmartContractType
const (
	SMARTCONTRACTTYPE_ERC20 SmartContractType = "erc20"
	SMARTCONTRACTTYPE_ERC721 SmartContractType = "erc721"
	SMARTCONTRACTTYPE_ERC1155 SmartContractType = "erc1155"
)

// All allowed values of SmartContractType enum
var AllowedSmartContractTypeEnumValues = []SmartContractType{
	"erc20",
	"erc721",
	"erc1155",
}

func (v *SmartContractType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SmartContractType(value)
	for _, existing := range AllowedSmartContractTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SmartContractType", value)
}

// NewSmartContractTypeFromValue returns a pointer to a valid SmartContractType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSmartContractTypeFromValue(v string) (*SmartContractType, error) {
	ev := SmartContractType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SmartContractType: valid values are %v", v, AllowedSmartContractTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SmartContractType) IsValid() bool {
	for _, existing := range AllowedSmartContractTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SmartContractType value
func (v SmartContractType) Ptr() *SmartContractType {
	return &v
}

type NullableSmartContractType struct {
	value *SmartContractType
	isSet bool
}

func (v NullableSmartContractType) Get() *SmartContractType {
	return v.value
}

func (v *NullableSmartContractType) Set(val *SmartContractType) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractType) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractType(val *SmartContractType) *NullableSmartContractType {
	return &NullableSmartContractType{value: val, isSet: true}
}

func (v NullableSmartContractType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

