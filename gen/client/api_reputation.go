/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ReputationAPI interface {

	/*
	GetAddressReputation Get the onchain reputation of an external address

	Get the onchain reputation of an external address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkId The ID of the blockchain network.
	@param addressId The ID of the address to fetch the reputation for.
	@return ApiGetAddressReputationRequest
	*/
	GetAddressReputation(ctx context.Context, networkId string, addressId string) ApiGetAddressReputationRequest

	// GetAddressReputationExecute executes the request
	//  @return AddressReputation
	GetAddressReputationExecute(r ApiGetAddressReputationRequest) (*AddressReputation, *http.Response, error)

	/*
	GetAddressRisk Get the risk of an address

	Get the risk of an address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param networkId The ID of the blockchain network.
	@param addressId The ID of the address to fetch the risk for.
	@return ApiGetAddressRiskRequest
	*/
	GetAddressRisk(ctx context.Context, networkId string, addressId string) ApiGetAddressRiskRequest

	// GetAddressRiskExecute executes the request
	//  @return AddressRisk
	GetAddressRiskExecute(r ApiGetAddressRiskRequest) (*AddressRisk, *http.Response, error)
}

// ReputationAPIService ReputationAPI service
type ReputationAPIService service

type ApiGetAddressReputationRequest struct {
	ctx context.Context
	ApiService ReputationAPI
	networkId string
	addressId string
}

func (r ApiGetAddressReputationRequest) Execute() (*AddressReputation, *http.Response, error) {
	return r.ApiService.GetAddressReputationExecute(r)
}

/*
GetAddressReputation Get the onchain reputation of an external address

Get the onchain reputation of an external address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The ID of the blockchain network.
 @param addressId The ID of the address to fetch the reputation for.
 @return ApiGetAddressReputationRequest
*/
func (a *ReputationAPIService) GetAddressReputation(ctx context.Context, networkId string, addressId string) ApiGetAddressReputationRequest {
	return ApiGetAddressReputationRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		addressId: addressId,
	}
}

// Execute executes the request
//  @return AddressReputation
func (a *ReputationAPIService) GetAddressReputationExecute(r ApiGetAddressReputationRequest) (*AddressReputation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressReputation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReputationAPIService.GetAddressReputation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/networks/{network_id}/addresses/{address_id}/reputation"
	localVarPath = strings.Replace(localVarPath, "{"+"network_id"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAddressRiskRequest struct {
	ctx context.Context
	ApiService ReputationAPI
	networkId string
	addressId string
}

func (r ApiGetAddressRiskRequest) Execute() (*AddressRisk, *http.Response, error) {
	return r.ApiService.GetAddressRiskExecute(r)
}

/*
GetAddressRisk Get the risk of an address

Get the risk of an address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The ID of the blockchain network.
 @param addressId The ID of the address to fetch the risk for.
 @return ApiGetAddressRiskRequest
*/
func (a *ReputationAPIService) GetAddressRisk(ctx context.Context, networkId string, addressId string) ApiGetAddressRiskRequest {
	return ApiGetAddressRiskRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		addressId: addressId,
	}
}

// Execute executes the request
//  @return AddressRisk
func (a *ReputationAPIService) GetAddressRiskExecute(r ApiGetAddressRiskRequest) (*AddressRisk, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressRisk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReputationAPIService.GetAddressRisk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/networks/{network_id}/addresses/{address_id}/risk"
	localVarPath = strings.Replace(localVarPath, "{"+"network_id"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address_id"+"}", url.PathEscape(parameterValueToString(r.addressId, "addressId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
