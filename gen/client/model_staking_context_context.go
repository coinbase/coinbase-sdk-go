/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the StakingContextContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StakingContextContext{}

// StakingContextContext struct for StakingContextContext
type StakingContextContext struct {
	StakeableBalance Balance `json:"stakeable_balance"`
	UnstakeableBalance Balance `json:"unstakeable_balance"`
	PendingClaimableBalance Balance `json:"pending_claimable_balance"`
	ClaimableBalance Balance `json:"claimable_balance"`
	AdditionalProperties map[string]interface{}
}

type _StakingContextContext StakingContextContext

// NewStakingContextContext instantiates a new StakingContextContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakingContextContext(stakeableBalance Balance, unstakeableBalance Balance, pendingClaimableBalance Balance, claimableBalance Balance) *StakingContextContext {
	this := StakingContextContext{}
	this.StakeableBalance = stakeableBalance
	this.UnstakeableBalance = unstakeableBalance
	this.PendingClaimableBalance = pendingClaimableBalance
	this.ClaimableBalance = claimableBalance
	return &this
}

// NewStakingContextContextWithDefaults instantiates a new StakingContextContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakingContextContextWithDefaults() *StakingContextContext {
	this := StakingContextContext{}
	return &this
}

// GetStakeableBalance returns the StakeableBalance field value
func (o *StakingContextContext) GetStakeableBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.StakeableBalance
}

// GetStakeableBalanceOk returns a tuple with the StakeableBalance field value
// and a boolean to check if the value has been set.
func (o *StakingContextContext) GetStakeableBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StakeableBalance, true
}

// SetStakeableBalance sets field value
func (o *StakingContextContext) SetStakeableBalance(v Balance) {
	o.StakeableBalance = v
}

// GetUnstakeableBalance returns the UnstakeableBalance field value
func (o *StakingContextContext) GetUnstakeableBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.UnstakeableBalance
}

// GetUnstakeableBalanceOk returns a tuple with the UnstakeableBalance field value
// and a boolean to check if the value has been set.
func (o *StakingContextContext) GetUnstakeableBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnstakeableBalance, true
}

// SetUnstakeableBalance sets field value
func (o *StakingContextContext) SetUnstakeableBalance(v Balance) {
	o.UnstakeableBalance = v
}

// GetPendingClaimableBalance returns the PendingClaimableBalance field value
func (o *StakingContextContext) GetPendingClaimableBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.PendingClaimableBalance
}

// GetPendingClaimableBalanceOk returns a tuple with the PendingClaimableBalance field value
// and a boolean to check if the value has been set.
func (o *StakingContextContext) GetPendingClaimableBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingClaimableBalance, true
}

// SetPendingClaimableBalance sets field value
func (o *StakingContextContext) SetPendingClaimableBalance(v Balance) {
	o.PendingClaimableBalance = v
}

// GetClaimableBalance returns the ClaimableBalance field value
func (o *StakingContextContext) GetClaimableBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.ClaimableBalance
}

// GetClaimableBalanceOk returns a tuple with the ClaimableBalance field value
// and a boolean to check if the value has been set.
func (o *StakingContextContext) GetClaimableBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClaimableBalance, true
}

// SetClaimableBalance sets field value
func (o *StakingContextContext) SetClaimableBalance(v Balance) {
	o.ClaimableBalance = v
}

func (o StakingContextContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StakingContextContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stakeable_balance"] = o.StakeableBalance
	toSerialize["unstakeable_balance"] = o.UnstakeableBalance
	toSerialize["pending_claimable_balance"] = o.PendingClaimableBalance
	toSerialize["claimable_balance"] = o.ClaimableBalance

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StakingContextContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stakeable_balance",
		"unstakeable_balance",
		"pending_claimable_balance",
		"claimable_balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStakingContextContext := _StakingContextContext{}

	err = json.Unmarshal(data, &varStakingContextContext)

	if err != nil {
		return err
	}

	*o = StakingContextContext(varStakingContextContext)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stakeable_balance")
		delete(additionalProperties, "unstakeable_balance")
		delete(additionalProperties, "pending_claimable_balance")
		delete(additionalProperties, "claimable_balance")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStakingContextContext struct {
	value *StakingContextContext
	isSet bool
}

func (v NullableStakingContextContext) Get() *StakingContextContext {
	return v.value
}

func (v *NullableStakingContextContext) Set(val *StakingContextContext) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingContextContext) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingContextContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingContextContext(val *StakingContextContext) *NullableStakingContextContext {
	return &NullableStakingContextContext{value: val, isSet: true}
}

func (v NullableStakingContextContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingContextContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


