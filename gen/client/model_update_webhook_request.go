/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebhookRequest{}

// UpdateWebhookRequest struct for UpdateWebhookRequest
type UpdateWebhookRequest struct {
	EventTypeFilter *WebhookEventTypeFilter `json:"event_type_filter,omitempty"`
	// Webhook will monitor all events that matches any one of the event filters.
	EventFilters []WebhookEventFilter `json:"event_filters,omitempty"`
	// The Webhook uri that updates to
	NotificationUri *string `json:"notification_uri,omitempty"`
}

// NewUpdateWebhookRequest instantiates a new UpdateWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookRequest() *UpdateWebhookRequest {
	this := UpdateWebhookRequest{}
	return &this
}

// NewUpdateWebhookRequestWithDefaults instantiates a new UpdateWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookRequestWithDefaults() *UpdateWebhookRequest {
	this := UpdateWebhookRequest{}
	return &this
}

// GetEventTypeFilter returns the EventTypeFilter field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetEventTypeFilter() WebhookEventTypeFilter {
	if o == nil || IsNil(o.EventTypeFilter) {
		var ret WebhookEventTypeFilter
		return ret
	}
	return *o.EventTypeFilter
}

// GetEventTypeFilterOk returns a tuple with the EventTypeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetEventTypeFilterOk() (*WebhookEventTypeFilter, bool) {
	if o == nil || IsNil(o.EventTypeFilter) {
		return nil, false
	}
	return o.EventTypeFilter, true
}

// HasEventTypeFilter returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasEventTypeFilter() bool {
	if o != nil && !IsNil(o.EventTypeFilter) {
		return true
	}

	return false
}

// SetEventTypeFilter gets a reference to the given WebhookEventTypeFilter and assigns it to the EventTypeFilter field.
func (o *UpdateWebhookRequest) SetEventTypeFilter(v WebhookEventTypeFilter) {
	o.EventTypeFilter = &v
}

// GetEventFilters returns the EventFilters field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetEventFilters() []WebhookEventFilter {
	if o == nil || IsNil(o.EventFilters) {
		var ret []WebhookEventFilter
		return ret
	}
	return o.EventFilters
}

// GetEventFiltersOk returns a tuple with the EventFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetEventFiltersOk() ([]WebhookEventFilter, bool) {
	if o == nil || IsNil(o.EventFilters) {
		return nil, false
	}
	return o.EventFilters, true
}

// HasEventFilters returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasEventFilters() bool {
	if o != nil && !IsNil(o.EventFilters) {
		return true
	}

	return false
}

// SetEventFilters gets a reference to the given []WebhookEventFilter and assigns it to the EventFilters field.
func (o *UpdateWebhookRequest) SetEventFilters(v []WebhookEventFilter) {
	o.EventFilters = v
}

// GetNotificationUri returns the NotificationUri field value if set, zero value otherwise.
func (o *UpdateWebhookRequest) GetNotificationUri() string {
	if o == nil || IsNil(o.NotificationUri) {
		var ret string
		return ret
	}
	return *o.NotificationUri
}

// GetNotificationUriOk returns a tuple with the NotificationUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookRequest) GetNotificationUriOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationUri) {
		return nil, false
	}
	return o.NotificationUri, true
}

// HasNotificationUri returns a boolean if a field has been set.
func (o *UpdateWebhookRequest) HasNotificationUri() bool {
	if o != nil && !IsNil(o.NotificationUri) {
		return true
	}

	return false
}

// SetNotificationUri gets a reference to the given string and assigns it to the NotificationUri field.
func (o *UpdateWebhookRequest) SetNotificationUri(v string) {
	o.NotificationUri = &v
}

func (o UpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTypeFilter) {
		toSerialize["event_type_filter"] = o.EventTypeFilter
	}
	if !IsNil(o.EventFilters) {
		toSerialize["event_filters"] = o.EventFilters
	}
	if !IsNil(o.NotificationUri) {
		toSerialize["notification_uri"] = o.NotificationUri
	}
	return toSerialize, nil
}

type NullableUpdateWebhookRequest struct {
	value *UpdateWebhookRequest
	isSet bool
}

func (v NullableUpdateWebhookRequest) Get() *UpdateWebhookRequest {
	return v.value
}

func (v *NullableUpdateWebhookRequest) Set(val *UpdateWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookRequest(val *UpdateWebhookRequest) *NullableUpdateWebhookRequest {
	return &NullableUpdateWebhookRequest{value: val, isSet: true}
}

func (v NullableUpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


