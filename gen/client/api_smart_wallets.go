/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SmartWalletsAPI interface {

	/*
	BroadcastUserOperation Broadcast a user operation

	Broadcast a user operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param smartWalletAddress The address of the smart wallet to broadcast the user operation from.
	@param userOperationId The ID of the user operation to broadcast.
	@return ApiBroadcastUserOperationRequest
	*/
	BroadcastUserOperation(ctx context.Context, smartWalletAddress string, userOperationId string) ApiBroadcastUserOperationRequest

	// BroadcastUserOperationExecute executes the request
	//  @return UserOperation
	BroadcastUserOperationExecute(r ApiBroadcastUserOperationRequest) (*UserOperation, *http.Response, error)

	/*
	CreateSmartWallet Create a new smart wallet

	Create a new smart wallet, not scoped to a given network.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateSmartWalletRequest
	*/
	CreateSmartWallet(ctx context.Context) ApiCreateSmartWalletRequest

	// CreateSmartWalletExecute executes the request
	//  @return SmartWallet
	CreateSmartWalletExecute(r ApiCreateSmartWalletRequest) (*SmartWallet, *http.Response, error)

	/*
	CreateUserOperation Create a new user operation

	Create a new user operation on a smart wallet.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param smartWalletAddress The address of the smart wallet to create the user operation on.
	@param networkId The ID of the network to create the user operation on.
	@return ApiCreateUserOperationRequest
	*/
	CreateUserOperation(ctx context.Context, smartWalletAddress string, networkId string) ApiCreateUserOperationRequest

	// CreateUserOperationExecute executes the request
	//  @return UserOperation
	CreateUserOperationExecute(r ApiCreateUserOperationRequest) (*UserOperation, *http.Response, error)

	/*
	GetSmartWallet Get smart wallet by address

	Get smart wallet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param smartWalletAddress The address of that smart wallet to fetch.
	@return ApiGetSmartWalletRequest
	*/
	GetSmartWallet(ctx context.Context, smartWalletAddress string) ApiGetSmartWalletRequest

	// GetSmartWalletExecute executes the request
	//  @return SmartWallet
	GetSmartWalletExecute(r ApiGetSmartWalletRequest) (*SmartWallet, *http.Response, error)

	/*
	GetUserOperation Get user operation

	Get user operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param smartWalletAddress The address of the smart wallet the user operation belongs to.
	@param userOperationId The ID of the user operation to fetch.
	@return ApiGetUserOperationRequest
	*/
	GetUserOperation(ctx context.Context, smartWalletAddress string, userOperationId string) ApiGetUserOperationRequest

	// GetUserOperationExecute executes the request
	//  @return UserOperation
	GetUserOperationExecute(r ApiGetUserOperationRequest) (*UserOperation, *http.Response, error)

	/*
	ListSmartWallets List smart wallets

	List smart wallets

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListSmartWalletsRequest
	*/
	ListSmartWallets(ctx context.Context) ApiListSmartWalletsRequest

	// ListSmartWalletsExecute executes the request
	//  @return SmartWalletList
	ListSmartWalletsExecute(r ApiListSmartWalletsRequest) (*SmartWalletList, *http.Response, error)
}

// SmartWalletsAPIService SmartWalletsAPI service
type SmartWalletsAPIService service

type ApiBroadcastUserOperationRequest struct {
	ctx context.Context
	ApiService SmartWalletsAPI
	smartWalletAddress string
	userOperationId string
	broadcastUserOperationRequest *BroadcastUserOperationRequest
}

func (r ApiBroadcastUserOperationRequest) BroadcastUserOperationRequest(broadcastUserOperationRequest BroadcastUserOperationRequest) ApiBroadcastUserOperationRequest {
	r.broadcastUserOperationRequest = &broadcastUserOperationRequest
	return r
}

func (r ApiBroadcastUserOperationRequest) Execute() (*UserOperation, *http.Response, error) {
	return r.ApiService.BroadcastUserOperationExecute(r)
}

/*
BroadcastUserOperation Broadcast a user operation

Broadcast a user operation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartWalletAddress The address of the smart wallet to broadcast the user operation from.
 @param userOperationId The ID of the user operation to broadcast.
 @return ApiBroadcastUserOperationRequest
*/
func (a *SmartWalletsAPIService) BroadcastUserOperation(ctx context.Context, smartWalletAddress string, userOperationId string) ApiBroadcastUserOperationRequest {
	return ApiBroadcastUserOperationRequest{
		ApiService: a,
		ctx: ctx,
		smartWalletAddress: smartWalletAddress,
		userOperationId: userOperationId,
	}
}

// Execute executes the request
//  @return UserOperation
func (a *SmartWalletsAPIService) BroadcastUserOperationExecute(r ApiBroadcastUserOperationRequest) (*UserOperation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartWalletsAPIService.BroadcastUserOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/smart_wallets/{smart_wallet_address}/user_operations/{user_operation_id}/broadcast"
	localVarPath = strings.Replace(localVarPath, "{"+"smart_wallet_address"+"}", url.PathEscape(parameterValueToString(r.smartWalletAddress, "smartWalletAddress")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_operation_id"+"}", url.PathEscape(parameterValueToString(r.userOperationId, "userOperationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.broadcastUserOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSmartWalletRequest struct {
	ctx context.Context
	ApiService SmartWalletsAPI
	createSmartWalletRequest *CreateSmartWalletRequest
}

func (r ApiCreateSmartWalletRequest) CreateSmartWalletRequest(createSmartWalletRequest CreateSmartWalletRequest) ApiCreateSmartWalletRequest {
	r.createSmartWalletRequest = &createSmartWalletRequest
	return r
}

func (r ApiCreateSmartWalletRequest) Execute() (*SmartWallet, *http.Response, error) {
	return r.ApiService.CreateSmartWalletExecute(r)
}

/*
CreateSmartWallet Create a new smart wallet

Create a new smart wallet, not scoped to a given network.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSmartWalletRequest
*/
func (a *SmartWalletsAPIService) CreateSmartWallet(ctx context.Context) ApiCreateSmartWalletRequest {
	return ApiCreateSmartWalletRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SmartWallet
func (a *SmartWalletsAPIService) CreateSmartWalletExecute(r ApiCreateSmartWalletRequest) (*SmartWallet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SmartWallet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartWalletsAPIService.CreateSmartWallet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/smart_wallets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createSmartWalletRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUserOperationRequest struct {
	ctx context.Context
	ApiService SmartWalletsAPI
	smartWalletAddress string
	networkId string
	createUserOperationRequest *CreateUserOperationRequest
}

func (r ApiCreateUserOperationRequest) CreateUserOperationRequest(createUserOperationRequest CreateUserOperationRequest) ApiCreateUserOperationRequest {
	r.createUserOperationRequest = &createUserOperationRequest
	return r
}

func (r ApiCreateUserOperationRequest) Execute() (*UserOperation, *http.Response, error) {
	return r.ApiService.CreateUserOperationExecute(r)
}

/*
CreateUserOperation Create a new user operation

Create a new user operation on a smart wallet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartWalletAddress The address of the smart wallet to create the user operation on.
 @param networkId The ID of the network to create the user operation on.
 @return ApiCreateUserOperationRequest
*/
func (a *SmartWalletsAPIService) CreateUserOperation(ctx context.Context, smartWalletAddress string, networkId string) ApiCreateUserOperationRequest {
	return ApiCreateUserOperationRequest{
		ApiService: a,
		ctx: ctx,
		smartWalletAddress: smartWalletAddress,
		networkId: networkId,
	}
}

// Execute executes the request
//  @return UserOperation
func (a *SmartWalletsAPIService) CreateUserOperationExecute(r ApiCreateUserOperationRequest) (*UserOperation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartWalletsAPIService.CreateUserOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/smart_wallets/{smart_wallet_address}/networks/{network_id}/user_operations"
	localVarPath = strings.Replace(localVarPath, "{"+"smart_wallet_address"+"}", url.PathEscape(parameterValueToString(r.smartWalletAddress, "smartWalletAddress")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"network_id"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createUserOperationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSmartWalletRequest struct {
	ctx context.Context
	ApiService SmartWalletsAPI
	smartWalletAddress string
}

func (r ApiGetSmartWalletRequest) Execute() (*SmartWallet, *http.Response, error) {
	return r.ApiService.GetSmartWalletExecute(r)
}

/*
GetSmartWallet Get smart wallet by address

Get smart wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartWalletAddress The address of that smart wallet to fetch.
 @return ApiGetSmartWalletRequest
*/
func (a *SmartWalletsAPIService) GetSmartWallet(ctx context.Context, smartWalletAddress string) ApiGetSmartWalletRequest {
	return ApiGetSmartWalletRequest{
		ApiService: a,
		ctx: ctx,
		smartWalletAddress: smartWalletAddress,
	}
}

// Execute executes the request
//  @return SmartWallet
func (a *SmartWalletsAPIService) GetSmartWalletExecute(r ApiGetSmartWalletRequest) (*SmartWallet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SmartWallet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartWalletsAPIService.GetSmartWallet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/smart_wallets/{smart_wallet_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"smart_wallet_address"+"}", url.PathEscape(parameterValueToString(r.smartWalletAddress, "smartWalletAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["session"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserOperationRequest struct {
	ctx context.Context
	ApiService SmartWalletsAPI
	smartWalletAddress string
	userOperationId string
}

func (r ApiGetUserOperationRequest) Execute() (*UserOperation, *http.Response, error) {
	return r.ApiService.GetUserOperationExecute(r)
}

/*
GetUserOperation Get user operation

Get user operation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartWalletAddress The address of the smart wallet the user operation belongs to.
 @param userOperationId The ID of the user operation to fetch.
 @return ApiGetUserOperationRequest
*/
func (a *SmartWalletsAPIService) GetUserOperation(ctx context.Context, smartWalletAddress string, userOperationId string) ApiGetUserOperationRequest {
	return ApiGetUserOperationRequest{
		ApiService: a,
		ctx: ctx,
		smartWalletAddress: smartWalletAddress,
		userOperationId: userOperationId,
	}
}

// Execute executes the request
//  @return UserOperation
func (a *SmartWalletsAPIService) GetUserOperationExecute(r ApiGetUserOperationRequest) (*UserOperation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartWalletsAPIService.GetUserOperation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/smart_wallets/{smart_wallet_address}/user_operations/{user_operation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"smart_wallet_address"+"}", url.PathEscape(parameterValueToString(r.smartWalletAddress, "smartWalletAddress")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_operation_id"+"}", url.PathEscape(parameterValueToString(r.userOperationId, "userOperationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["session"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSmartWalletsRequest struct {
	ctx context.Context
	ApiService SmartWalletsAPI
	limit *int32
	page *string
}

// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
func (r ApiListSmartWalletsRequest) Limit(limit int32) ApiListSmartWalletsRequest {
	r.limit = &limit
	return r
}

// A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
func (r ApiListSmartWalletsRequest) Page(page string) ApiListSmartWalletsRequest {
	r.page = &page
	return r
}

func (r ApiListSmartWalletsRequest) Execute() (*SmartWalletList, *http.Response, error) {
	return r.ApiService.ListSmartWalletsExecute(r)
}

/*
ListSmartWallets List smart wallets

List smart wallets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSmartWalletsRequest
*/
func (a *SmartWalletsAPIService) ListSmartWallets(ctx context.Context) ApiListSmartWalletsRequest {
	return ApiListSmartWalletsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SmartWalletList
func (a *SmartWalletsAPIService) ListSmartWalletsExecute(r ApiListSmartWalletsRequest) (*SmartWalletList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SmartWalletList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartWalletsAPIService.ListSmartWallets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/smart_wallets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["session"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Jwt"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
