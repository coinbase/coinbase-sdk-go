/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EthereumValidatorDepositData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthereumValidatorDepositData{}

// EthereumValidatorDepositData The ethereum validator deposit data available after depositing 32x ETH to a ETH validator deposit contract.
type EthereumValidatorDepositData struct {
	// The validator pubkey.
	ValidatorPubkey string `json:"validator_pubkey"`
	// The validator withdraw credentials. More info [here](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#withdrawal-credentials)
	WithdrawCredentials string `json:"withdraw_credentials"`
	// The expected validator deposit data root as a protection against malformed calldata.
	DepositDataRoot string `json:"deposit_data_root"`
	// The deposit data signed by validator's private key.
	DepositSignature string `json:"deposit_signature"`
}

type _EthereumValidatorDepositData EthereumValidatorDepositData

// NewEthereumValidatorDepositData instantiates a new EthereumValidatorDepositData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthereumValidatorDepositData(validatorPubkey string, withdrawCredentials string, depositDataRoot string, depositSignature string) *EthereumValidatorDepositData {
	this := EthereumValidatorDepositData{}
	this.ValidatorPubkey = validatorPubkey
	this.WithdrawCredentials = withdrawCredentials
	this.DepositDataRoot = depositDataRoot
	this.DepositSignature = depositSignature
	return &this
}

// NewEthereumValidatorDepositDataWithDefaults instantiates a new EthereumValidatorDepositData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthereumValidatorDepositDataWithDefaults() *EthereumValidatorDepositData {
	this := EthereumValidatorDepositData{}
	return &this
}

// GetValidatorPubkey returns the ValidatorPubkey field value
func (o *EthereumValidatorDepositData) GetValidatorPubkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidatorPubkey
}

// GetValidatorPubkeyOk returns a tuple with the ValidatorPubkey field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorDepositData) GetValidatorPubkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorPubkey, true
}

// SetValidatorPubkey sets field value
func (o *EthereumValidatorDepositData) SetValidatorPubkey(v string) {
	o.ValidatorPubkey = v
}

// GetWithdrawCredentials returns the WithdrawCredentials field value
func (o *EthereumValidatorDepositData) GetWithdrawCredentials() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WithdrawCredentials
}

// GetWithdrawCredentialsOk returns a tuple with the WithdrawCredentials field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorDepositData) GetWithdrawCredentialsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WithdrawCredentials, true
}

// SetWithdrawCredentials sets field value
func (o *EthereumValidatorDepositData) SetWithdrawCredentials(v string) {
	o.WithdrawCredentials = v
}

// GetDepositDataRoot returns the DepositDataRoot field value
func (o *EthereumValidatorDepositData) GetDepositDataRoot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepositDataRoot
}

// GetDepositDataRootOk returns a tuple with the DepositDataRoot field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorDepositData) GetDepositDataRootOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepositDataRoot, true
}

// SetDepositDataRoot sets field value
func (o *EthereumValidatorDepositData) SetDepositDataRoot(v string) {
	o.DepositDataRoot = v
}

// GetDepositSignature returns the DepositSignature field value
func (o *EthereumValidatorDepositData) GetDepositSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepositSignature
}

// GetDepositSignatureOk returns a tuple with the DepositSignature field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorDepositData) GetDepositSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepositSignature, true
}

// SetDepositSignature sets field value
func (o *EthereumValidatorDepositData) SetDepositSignature(v string) {
	o.DepositSignature = v
}

func (o EthereumValidatorDepositData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthereumValidatorDepositData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["validator_pubkey"] = o.ValidatorPubkey
	toSerialize["withdraw_credentials"] = o.WithdrawCredentials
	toSerialize["deposit_data_root"] = o.DepositDataRoot
	toSerialize["deposit_signature"] = o.DepositSignature
	return toSerialize, nil
}

func (o *EthereumValidatorDepositData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"validator_pubkey",
		"withdraw_credentials",
		"deposit_data_root",
		"deposit_signature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEthereumValidatorDepositData := _EthereumValidatorDepositData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEthereumValidatorDepositData)

	if err != nil {
		return err
	}

	*o = EthereumValidatorDepositData(varEthereumValidatorDepositData)

	return err
}

type NullableEthereumValidatorDepositData struct {
	value *EthereumValidatorDepositData
	isSet bool
}

func (v NullableEthereumValidatorDepositData) Get() *EthereumValidatorDepositData {
	return v.value
}

func (v *NullableEthereumValidatorDepositData) Set(val *EthereumValidatorDepositData) {
	v.value = val
	v.isSet = true
}

func (v NullableEthereumValidatorDepositData) IsSet() bool {
	return v.isSet
}

func (v *NullableEthereumValidatorDepositData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthereumValidatorDepositData(val *EthereumValidatorDepositData) *NullableEthereumValidatorDepositData {
	return &NullableEthereumValidatorDepositData{value: val, isSet: true}
}

func (v NullableEthereumValidatorDepositData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthereumValidatorDepositData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


