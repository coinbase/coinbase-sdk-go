/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebhookSmartContractEventFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookSmartContractEventFilter{}

// WebhookSmartContractEventFilter Filter for smart contract events. This filter allows the client to specify smart contract addresses to monitor for activities such as contract function calls. 
type WebhookSmartContractEventFilter struct {
	// A list of smart contract addresses to filter on.
	ContractAddresses []string `json:"contract_addresses"`
}

type _WebhookSmartContractEventFilter WebhookSmartContractEventFilter

// NewWebhookSmartContractEventFilter instantiates a new WebhookSmartContractEventFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookSmartContractEventFilter(contractAddresses []string) *WebhookSmartContractEventFilter {
	this := WebhookSmartContractEventFilter{}
	this.ContractAddresses = contractAddresses
	return &this
}

// NewWebhookSmartContractEventFilterWithDefaults instantiates a new WebhookSmartContractEventFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookSmartContractEventFilterWithDefaults() *WebhookSmartContractEventFilter {
	this := WebhookSmartContractEventFilter{}
	return &this
}

// GetContractAddresses returns the ContractAddresses field value
func (o *WebhookSmartContractEventFilter) GetContractAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ContractAddresses
}

// GetContractAddressesOk returns a tuple with the ContractAddresses field value
// and a boolean to check if the value has been set.
func (o *WebhookSmartContractEventFilter) GetContractAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractAddresses, true
}

// SetContractAddresses sets field value
func (o *WebhookSmartContractEventFilter) SetContractAddresses(v []string) {
	o.ContractAddresses = v
}

func (o WebhookSmartContractEventFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookSmartContractEventFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contract_addresses"] = o.ContractAddresses
	return toSerialize, nil
}

func (o *WebhookSmartContractEventFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contract_addresses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookSmartContractEventFilter := _WebhookSmartContractEventFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebhookSmartContractEventFilter)

	if err != nil {
		return err
	}

	*o = WebhookSmartContractEventFilter(varWebhookSmartContractEventFilter)

	return err
}

type NullableWebhookSmartContractEventFilter struct {
	value *WebhookSmartContractEventFilter
	isSet bool
}

func (v NullableWebhookSmartContractEventFilter) Get() *WebhookSmartContractEventFilter {
	return v.value
}

func (v *NullableWebhookSmartContractEventFilter) Set(val *WebhookSmartContractEventFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookSmartContractEventFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookSmartContractEventFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookSmartContractEventFilter(val *WebhookSmartContractEventFilter) *NullableWebhookSmartContractEventFilter {
	return &NullableWebhookSmartContractEventFilter{value: val, isSet: true}
}

func (v NullableWebhookSmartContractEventFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookSmartContractEventFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


