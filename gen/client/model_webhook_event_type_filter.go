/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// WebhookEventTypeFilter - The event_type_filter parameter specifies the criteria to filter events based on event type.
type WebhookEventTypeFilter struct {
	WebhookSmartContractEventFilter *WebhookSmartContractEventFilter
	WebhookWalletActivityFilter *WebhookWalletActivityFilter
}

// WebhookSmartContractEventFilterAsWebhookEventTypeFilter is a convenience function that returns WebhookSmartContractEventFilter wrapped in WebhookEventTypeFilter
func WebhookSmartContractEventFilterAsWebhookEventTypeFilter(v *WebhookSmartContractEventFilter) WebhookEventTypeFilter {
	return WebhookEventTypeFilter{
		WebhookSmartContractEventFilter: v,
	}
}

// WebhookWalletActivityFilterAsWebhookEventTypeFilter is a convenience function that returns WebhookWalletActivityFilter wrapped in WebhookEventTypeFilter
func WebhookWalletActivityFilterAsWebhookEventTypeFilter(v *WebhookWalletActivityFilter) WebhookEventTypeFilter {
	return WebhookEventTypeFilter{
		WebhookWalletActivityFilter: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WebhookEventTypeFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WebhookSmartContractEventFilter
	err = newStrictDecoder(data).Decode(&dst.WebhookSmartContractEventFilter)
	if err == nil {
		jsonWebhookSmartContractEventFilter, _ := json.Marshal(dst.WebhookSmartContractEventFilter)
		if string(jsonWebhookSmartContractEventFilter) == "{}" { // empty struct
			dst.WebhookSmartContractEventFilter = nil
		} else {
			if err = validator.Validate(dst.WebhookSmartContractEventFilter); err != nil {
				dst.WebhookSmartContractEventFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookSmartContractEventFilter = nil
	}

	// try to unmarshal data into WebhookWalletActivityFilter
	err = newStrictDecoder(data).Decode(&dst.WebhookWalletActivityFilter)
	if err == nil {
		jsonWebhookWalletActivityFilter, _ := json.Marshal(dst.WebhookWalletActivityFilter)
		if string(jsonWebhookWalletActivityFilter) == "{}" { // empty struct
			dst.WebhookWalletActivityFilter = nil
		} else {
			if err = validator.Validate(dst.WebhookWalletActivityFilter); err != nil {
				dst.WebhookWalletActivityFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.WebhookWalletActivityFilter = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WebhookSmartContractEventFilter = nil
		dst.WebhookWalletActivityFilter = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WebhookEventTypeFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WebhookEventTypeFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WebhookEventTypeFilter) MarshalJSON() ([]byte, error) {
	if src.WebhookSmartContractEventFilter != nil {
		return json.Marshal(&src.WebhookSmartContractEventFilter)
	}

	if src.WebhookWalletActivityFilter != nil {
		return json.Marshal(&src.WebhookWalletActivityFilter)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WebhookEventTypeFilter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WebhookSmartContractEventFilter != nil {
		return obj.WebhookSmartContractEventFilter
	}

	if obj.WebhookWalletActivityFilter != nil {
		return obj.WebhookWalletActivityFilter
	}

	// all schemas are nil
	return nil
}

type NullableWebhookEventTypeFilter struct {
	value *WebhookEventTypeFilter
	isSet bool
}

func (v NullableWebhookEventTypeFilter) Get() *WebhookEventTypeFilter {
	return v.value
}

func (v *NullableWebhookEventTypeFilter) Set(val *WebhookEventTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookEventTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookEventTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookEventTypeFilter(val *WebhookEventTypeFilter) *NullableWebhookEventTypeFilter {
	return &NullableWebhookEventTypeFilter{value: val, isSet: true}
}

func (v NullableWebhookEventTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookEventTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


