/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the EthereumValidatorMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthereumValidatorMetadata{}

// EthereumValidatorMetadata An Ethereum validator.
type EthereumValidatorMetadata struct {
	// The index of the validator in the validator set.
	Index string `json:"index"`
	// The public key of the validator.
	PublicKey string `json:"public_key"`
	// The address to which the validator's rewards are sent.
	WithdrawalAddress string `json:"withdrawal_address"`
	// Whether the validator has been slashed.
	Slashed bool `json:"slashed"`
	// The epoch at which the validator was activated.
	ActivationEpoch string `json:"activationEpoch"`
	// The epoch at which the validator exited.
	ExitEpoch string `json:"exitEpoch"`
	// The epoch at which the validator can withdraw.
	WithdrawableEpoch string `json:"withdrawableEpoch"`
	Balance Balance `json:"balance"`
	EffectiveBalance Balance `json:"effective_balance"`
	// The address for execution layer rewards (MEV & tx fees). If using a reward splitter plan, this is a smart contract  address that splits rewards based on defined commissions and send a portion to the forwarded_fee_recipient_address. 
	FeeRecipientAddress string `json:"fee_recipient_address"`
	// If using a reward splitter plan, this address receives a defined percentage of the total execution layer rewards. 
	ForwardedFeeRecipientAddress *string `json:"forwarded_fee_recipient_address,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EthereumValidatorMetadata EthereumValidatorMetadata

// NewEthereumValidatorMetadata instantiates a new EthereumValidatorMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthereumValidatorMetadata(index string, publicKey string, withdrawalAddress string, slashed bool, activationEpoch string, exitEpoch string, withdrawableEpoch string, balance Balance, effectiveBalance Balance, feeRecipientAddress string) *EthereumValidatorMetadata {
	this := EthereumValidatorMetadata{}
	this.Index = index
	this.PublicKey = publicKey
	this.WithdrawalAddress = withdrawalAddress
	this.Slashed = slashed
	this.ActivationEpoch = activationEpoch
	this.ExitEpoch = exitEpoch
	this.WithdrawableEpoch = withdrawableEpoch
	this.Balance = balance
	this.EffectiveBalance = effectiveBalance
	this.FeeRecipientAddress = feeRecipientAddress
	return &this
}

// NewEthereumValidatorMetadataWithDefaults instantiates a new EthereumValidatorMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthereumValidatorMetadataWithDefaults() *EthereumValidatorMetadata {
	this := EthereumValidatorMetadata{}
	return &this
}

// GetIndex returns the Index field value
func (o *EthereumValidatorMetadata) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *EthereumValidatorMetadata) SetIndex(v string) {
	o.Index = v
}

// GetPublicKey returns the PublicKey field value
func (o *EthereumValidatorMetadata) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *EthereumValidatorMetadata) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetWithdrawalAddress returns the WithdrawalAddress field value
func (o *EthereumValidatorMetadata) GetWithdrawalAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WithdrawalAddress
}

// GetWithdrawalAddressOk returns a tuple with the WithdrawalAddress field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetWithdrawalAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WithdrawalAddress, true
}

// SetWithdrawalAddress sets field value
func (o *EthereumValidatorMetadata) SetWithdrawalAddress(v string) {
	o.WithdrawalAddress = v
}

// GetSlashed returns the Slashed field value
func (o *EthereumValidatorMetadata) GetSlashed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Slashed
}

// GetSlashedOk returns a tuple with the Slashed field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetSlashedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slashed, true
}

// SetSlashed sets field value
func (o *EthereumValidatorMetadata) SetSlashed(v bool) {
	o.Slashed = v
}

// GetActivationEpoch returns the ActivationEpoch field value
func (o *EthereumValidatorMetadata) GetActivationEpoch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActivationEpoch
}

// GetActivationEpochOk returns a tuple with the ActivationEpoch field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetActivationEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivationEpoch, true
}

// SetActivationEpoch sets field value
func (o *EthereumValidatorMetadata) SetActivationEpoch(v string) {
	o.ActivationEpoch = v
}

// GetExitEpoch returns the ExitEpoch field value
func (o *EthereumValidatorMetadata) GetExitEpoch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExitEpoch
}

// GetExitEpochOk returns a tuple with the ExitEpoch field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetExitEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExitEpoch, true
}

// SetExitEpoch sets field value
func (o *EthereumValidatorMetadata) SetExitEpoch(v string) {
	o.ExitEpoch = v
}

// GetWithdrawableEpoch returns the WithdrawableEpoch field value
func (o *EthereumValidatorMetadata) GetWithdrawableEpoch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WithdrawableEpoch
}

// GetWithdrawableEpochOk returns a tuple with the WithdrawableEpoch field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetWithdrawableEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WithdrawableEpoch, true
}

// SetWithdrawableEpoch sets field value
func (o *EthereumValidatorMetadata) SetWithdrawableEpoch(v string) {
	o.WithdrawableEpoch = v
}

// GetBalance returns the Balance field value
func (o *EthereumValidatorMetadata) GetBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *EthereumValidatorMetadata) SetBalance(v Balance) {
	o.Balance = v
}

// GetEffectiveBalance returns the EffectiveBalance field value
func (o *EthereumValidatorMetadata) GetEffectiveBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.EffectiveBalance
}

// GetEffectiveBalanceOk returns a tuple with the EffectiveBalance field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetEffectiveBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveBalance, true
}

// SetEffectiveBalance sets field value
func (o *EthereumValidatorMetadata) SetEffectiveBalance(v Balance) {
	o.EffectiveBalance = v
}

// GetFeeRecipientAddress returns the FeeRecipientAddress field value
func (o *EthereumValidatorMetadata) GetFeeRecipientAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeRecipientAddress
}

// GetFeeRecipientAddressOk returns a tuple with the FeeRecipientAddress field value
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetFeeRecipientAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeRecipientAddress, true
}

// SetFeeRecipientAddress sets field value
func (o *EthereumValidatorMetadata) SetFeeRecipientAddress(v string) {
	o.FeeRecipientAddress = v
}

// GetForwardedFeeRecipientAddress returns the ForwardedFeeRecipientAddress field value if set, zero value otherwise.
func (o *EthereumValidatorMetadata) GetForwardedFeeRecipientAddress() string {
	if o == nil || IsNil(o.ForwardedFeeRecipientAddress) {
		var ret string
		return ret
	}
	return *o.ForwardedFeeRecipientAddress
}

// GetForwardedFeeRecipientAddressOk returns a tuple with the ForwardedFeeRecipientAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthereumValidatorMetadata) GetForwardedFeeRecipientAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardedFeeRecipientAddress) {
		return nil, false
	}
	return o.ForwardedFeeRecipientAddress, true
}

// HasForwardedFeeRecipientAddress returns a boolean if a field has been set.
func (o *EthereumValidatorMetadata) HasForwardedFeeRecipientAddress() bool {
	if o != nil && !IsNil(o.ForwardedFeeRecipientAddress) {
		return true
	}

	return false
}

// SetForwardedFeeRecipientAddress gets a reference to the given string and assigns it to the ForwardedFeeRecipientAddress field.
func (o *EthereumValidatorMetadata) SetForwardedFeeRecipientAddress(v string) {
	o.ForwardedFeeRecipientAddress = &v
}

func (o EthereumValidatorMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthereumValidatorMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	toSerialize["public_key"] = o.PublicKey
	toSerialize["withdrawal_address"] = o.WithdrawalAddress
	toSerialize["slashed"] = o.Slashed
	toSerialize["activationEpoch"] = o.ActivationEpoch
	toSerialize["exitEpoch"] = o.ExitEpoch
	toSerialize["withdrawableEpoch"] = o.WithdrawableEpoch
	toSerialize["balance"] = o.Balance
	toSerialize["effective_balance"] = o.EffectiveBalance
	toSerialize["fee_recipient_address"] = o.FeeRecipientAddress
	if !IsNil(o.ForwardedFeeRecipientAddress) {
		toSerialize["forwarded_fee_recipient_address"] = o.ForwardedFeeRecipientAddress
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EthereumValidatorMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"public_key",
		"withdrawal_address",
		"slashed",
		"activationEpoch",
		"exitEpoch",
		"withdrawableEpoch",
		"balance",
		"effective_balance",
		"fee_recipient_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEthereumValidatorMetadata := _EthereumValidatorMetadata{}

	err = json.Unmarshal(data, &varEthereumValidatorMetadata)

	if err != nil {
		return err
	}

	*o = EthereumValidatorMetadata(varEthereumValidatorMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "index")
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "withdrawal_address")
		delete(additionalProperties, "slashed")
		delete(additionalProperties, "activationEpoch")
		delete(additionalProperties, "exitEpoch")
		delete(additionalProperties, "withdrawableEpoch")
		delete(additionalProperties, "balance")
		delete(additionalProperties, "effective_balance")
		delete(additionalProperties, "fee_recipient_address")
		delete(additionalProperties, "forwarded_fee_recipient_address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEthereumValidatorMetadata struct {
	value *EthereumValidatorMetadata
	isSet bool
}

func (v NullableEthereumValidatorMetadata) Get() *EthereumValidatorMetadata {
	return v.value
}

func (v *NullableEthereumValidatorMetadata) Set(val *EthereumValidatorMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableEthereumValidatorMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableEthereumValidatorMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthereumValidatorMetadata(val *EthereumValidatorMetadata) *NullableEthereumValidatorMetadata {
	return &NullableEthereumValidatorMetadata{value: val, isSet: true}
}

func (v NullableEthereumValidatorMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthereumValidatorMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


