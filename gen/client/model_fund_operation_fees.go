/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FundOperationFees type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FundOperationFees{}

// FundOperationFees The fees for a fund operation.
type FundOperationFees struct {
	BuyFee FiatAmount `json:"buy_fee"`
	TransferFee CryptoAmount `json:"transfer_fee"`
}

type _FundOperationFees FundOperationFees

// NewFundOperationFees instantiates a new FundOperationFees object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundOperationFees(buyFee FiatAmount, transferFee CryptoAmount) *FundOperationFees {
	this := FundOperationFees{}
	this.BuyFee = buyFee
	this.TransferFee = transferFee
	return &this
}

// NewFundOperationFeesWithDefaults instantiates a new FundOperationFees object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundOperationFeesWithDefaults() *FundOperationFees {
	this := FundOperationFees{}
	return &this
}

// GetBuyFee returns the BuyFee field value
func (o *FundOperationFees) GetBuyFee() FiatAmount {
	if o == nil {
		var ret FiatAmount
		return ret
	}

	return o.BuyFee
}

// GetBuyFeeOk returns a tuple with the BuyFee field value
// and a boolean to check if the value has been set.
func (o *FundOperationFees) GetBuyFeeOk() (*FiatAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyFee, true
}

// SetBuyFee sets field value
func (o *FundOperationFees) SetBuyFee(v FiatAmount) {
	o.BuyFee = v
}

// GetTransferFee returns the TransferFee field value
func (o *FundOperationFees) GetTransferFee() CryptoAmount {
	if o == nil {
		var ret CryptoAmount
		return ret
	}

	return o.TransferFee
}

// GetTransferFeeOk returns a tuple with the TransferFee field value
// and a boolean to check if the value has been set.
func (o *FundOperationFees) GetTransferFeeOk() (*CryptoAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferFee, true
}

// SetTransferFee sets field value
func (o *FundOperationFees) SetTransferFee(v CryptoAmount) {
	o.TransferFee = v
}

func (o FundOperationFees) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FundOperationFees) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["buy_fee"] = o.BuyFee
	toSerialize["transfer_fee"] = o.TransferFee
	return toSerialize, nil
}

func (o *FundOperationFees) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"buy_fee",
		"transfer_fee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFundOperationFees := _FundOperationFees{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFundOperationFees)

	if err != nil {
		return err
	}

	*o = FundOperationFees(varFundOperationFees)

	return err
}

type NullableFundOperationFees struct {
	value *FundOperationFees
	isSet bool
}

func (v NullableFundOperationFees) Get() *FundOperationFees {
	return v.value
}

func (v *NullableFundOperationFees) Set(val *FundOperationFees) {
	v.value = val
	v.isSet = true
}

func (v NullableFundOperationFees) IsSet() bool {
	return v.isSet
}

func (v *NullableFundOperationFees) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundOperationFees(val *FundOperationFees) *NullableFundOperationFees {
	return &NullableFundOperationFees{value: val, isSet: true}
}

func (v NullableFundOperationFees) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundOperationFees) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


