/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateWalletWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWalletWebhookRequest{}

// CreateWalletWebhookRequest struct for CreateWalletWebhookRequest
type CreateWalletWebhookRequest struct {
	// The URL to which the notifications will be sent.
	NotificationUri string `json:"notification_uri"`
	// The custom header to be used for x-webhook-signature header on callbacks, so developers can verify the requests are coming from Coinbase.
	SignatureHeader *string `json:"signature_header,omitempty"`
}

type _CreateWalletWebhookRequest CreateWalletWebhookRequest

// NewCreateWalletWebhookRequest instantiates a new CreateWalletWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWalletWebhookRequest(notificationUri string) *CreateWalletWebhookRequest {
	this := CreateWalletWebhookRequest{}
	this.NotificationUri = notificationUri
	return &this
}

// NewCreateWalletWebhookRequestWithDefaults instantiates a new CreateWalletWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWalletWebhookRequestWithDefaults() *CreateWalletWebhookRequest {
	this := CreateWalletWebhookRequest{}
	return &this
}

// GetNotificationUri returns the NotificationUri field value
func (o *CreateWalletWebhookRequest) GetNotificationUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationUri
}

// GetNotificationUriOk returns a tuple with the NotificationUri field value
// and a boolean to check if the value has been set.
func (o *CreateWalletWebhookRequest) GetNotificationUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationUri, true
}

// SetNotificationUri sets field value
func (o *CreateWalletWebhookRequest) SetNotificationUri(v string) {
	o.NotificationUri = v
}

// GetSignatureHeader returns the SignatureHeader field value if set, zero value otherwise.
func (o *CreateWalletWebhookRequest) GetSignatureHeader() string {
	if o == nil || IsNil(o.SignatureHeader) {
		var ret string
		return ret
	}
	return *o.SignatureHeader
}

// GetSignatureHeaderOk returns a tuple with the SignatureHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWalletWebhookRequest) GetSignatureHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureHeader) {
		return nil, false
	}
	return o.SignatureHeader, true
}

// HasSignatureHeader returns a boolean if a field has been set.
func (o *CreateWalletWebhookRequest) HasSignatureHeader() bool {
	if o != nil && !IsNil(o.SignatureHeader) {
		return true
	}

	return false
}

// SetSignatureHeader gets a reference to the given string and assigns it to the SignatureHeader field.
func (o *CreateWalletWebhookRequest) SetSignatureHeader(v string) {
	o.SignatureHeader = &v
}

func (o CreateWalletWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWalletWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notification_uri"] = o.NotificationUri
	if !IsNil(o.SignatureHeader) {
		toSerialize["signature_header"] = o.SignatureHeader
	}
	return toSerialize, nil
}

func (o *CreateWalletWebhookRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notification_uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateWalletWebhookRequest := _CreateWalletWebhookRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateWalletWebhookRequest)

	if err != nil {
		return err
	}

	*o = CreateWalletWebhookRequest(varCreateWalletWebhookRequest)

	return err
}

type NullableCreateWalletWebhookRequest struct {
	value *CreateWalletWebhookRequest
	isSet bool
}

func (v NullableCreateWalletWebhookRequest) Get() *CreateWalletWebhookRequest {
	return v.value
}

func (v *NullableCreateWalletWebhookRequest) Set(val *CreateWalletWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWalletWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWalletWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWalletWebhookRequest(val *CreateWalletWebhookRequest) *NullableCreateWalletWebhookRequest {
	return &NullableCreateWalletWebhookRequest{value: val, isSet: true}
}

func (v NullableCreateWalletWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWalletWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


