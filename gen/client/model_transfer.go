/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the Transfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transfer{}

// Transfer A transfer of an asset from one address to another
type Transfer struct {
	// The ID of the blockchain network
	NetworkId string `json:"network_id"`
	// The ID of the wallet that owns the from address
	WalletId string `json:"wallet_id"`
	// The onchain address of the sender
	AddressId string `json:"address_id"`
	// The onchain address of the recipient
	Destination string `json:"destination"`
	// The amount in the atomic units of the asset
	Amount string `json:"amount"`
	// The ID of the asset being transferred. Use `asset.asset_id` instead.
	// Deprecated
	AssetId string `json:"asset_id"`
	Asset Asset `json:"asset"`
	// The ID of the transfer
	TransferId string `json:"transfer_id"`
	Transaction *Transaction `json:"transaction,omitempty"`
	SponsoredSend *SponsoredSend `json:"sponsored_send,omitempty"`
	// The unsigned payload of the transfer. This is the payload that needs to be signed by the sender.
	// Deprecated
	UnsignedPayload *string `json:"unsigned_payload,omitempty"`
	// The signed payload of the transfer. This is the payload that has been signed by the sender.
	// Deprecated
	SignedPayload *string `json:"signed_payload,omitempty"`
	// The hash of the transfer transaction
	// Deprecated
	TransactionHash *string `json:"transaction_hash,omitempty"`
	// Deprecated
	Status *string `json:"status,omitempty"`
	// Whether the transfer uses sponsored gas
	Gasless bool `json:"gasless"`
	AdditionalProperties map[string]interface{}
}

type _Transfer Transfer

// NewTransfer instantiates a new Transfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransfer(networkId string, walletId string, addressId string, destination string, amount string, assetId string, asset Asset, transferId string, gasless bool) *Transfer {
	this := Transfer{}
	this.NetworkId = networkId
	this.WalletId = walletId
	this.AddressId = addressId
	this.Destination = destination
	this.Amount = amount
	this.AssetId = assetId
	this.Asset = asset
	this.TransferId = transferId
	this.Gasless = gasless
	return &this
}

// NewTransferWithDefaults instantiates a new Transfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferWithDefaults() *Transfer {
	this := Transfer{}
	return &this
}

// GetNetworkId returns the NetworkId field value
func (o *Transfer) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *Transfer) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetWalletId returns the WalletId field value
func (o *Transfer) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *Transfer) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddressId returns the AddressId field value
func (o *Transfer) GetAddressId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetAddressIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressId, true
}

// SetAddressId sets field value
func (o *Transfer) SetAddressId(v string) {
	o.AddressId = v
}

// GetDestination returns the Destination field value
func (o *Transfer) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *Transfer) SetDestination(v string) {
	o.Destination = v
}

// GetAmount returns the Amount field value
func (o *Transfer) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Transfer) SetAmount(v string) {
	o.Amount = v
}

// GetAssetId returns the AssetId field value
// Deprecated
func (o *Transfer) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *Transfer) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
// Deprecated
func (o *Transfer) SetAssetId(v string) {
	o.AssetId = v
}

// GetAsset returns the Asset field value
func (o *Transfer) GetAsset() Asset {
	if o == nil {
		var ret Asset
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetAssetOk() (*Asset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Transfer) SetAsset(v Asset) {
	o.Asset = v
}

// GetTransferId returns the TransferId field value
func (o *Transfer) GetTransferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferId
}

// GetTransferIdOk returns a tuple with the TransferId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetTransferIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferId, true
}

// SetTransferId sets field value
func (o *Transfer) SetTransferId(v string) {
	o.TransferId = v
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *Transfer) GetTransaction() Transaction {
	if o == nil || IsNil(o.Transaction) {
		var ret Transaction
		return ret
	}
	return *o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetTransactionOk() (*Transaction, bool) {
	if o == nil || IsNil(o.Transaction) {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *Transfer) HasTransaction() bool {
	if o != nil && !IsNil(o.Transaction) {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given Transaction and assigns it to the Transaction field.
func (o *Transfer) SetTransaction(v Transaction) {
	o.Transaction = &v
}

// GetSponsoredSend returns the SponsoredSend field value if set, zero value otherwise.
func (o *Transfer) GetSponsoredSend() SponsoredSend {
	if o == nil || IsNil(o.SponsoredSend) {
		var ret SponsoredSend
		return ret
	}
	return *o.SponsoredSend
}

// GetSponsoredSendOk returns a tuple with the SponsoredSend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetSponsoredSendOk() (*SponsoredSend, bool) {
	if o == nil || IsNil(o.SponsoredSend) {
		return nil, false
	}
	return o.SponsoredSend, true
}

// HasSponsoredSend returns a boolean if a field has been set.
func (o *Transfer) HasSponsoredSend() bool {
	if o != nil && !IsNil(o.SponsoredSend) {
		return true
	}

	return false
}

// SetSponsoredSend gets a reference to the given SponsoredSend and assigns it to the SponsoredSend field.
func (o *Transfer) SetSponsoredSend(v SponsoredSend) {
	o.SponsoredSend = &v
}

// GetUnsignedPayload returns the UnsignedPayload field value if set, zero value otherwise.
// Deprecated
func (o *Transfer) GetUnsignedPayload() string {
	if o == nil || IsNil(o.UnsignedPayload) {
		var ret string
		return ret
	}
	return *o.UnsignedPayload
}

// GetUnsignedPayloadOk returns a tuple with the UnsignedPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Transfer) GetUnsignedPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.UnsignedPayload) {
		return nil, false
	}
	return o.UnsignedPayload, true
}

// HasUnsignedPayload returns a boolean if a field has been set.
func (o *Transfer) HasUnsignedPayload() bool {
	if o != nil && !IsNil(o.UnsignedPayload) {
		return true
	}

	return false
}

// SetUnsignedPayload gets a reference to the given string and assigns it to the UnsignedPayload field.
// Deprecated
func (o *Transfer) SetUnsignedPayload(v string) {
	o.UnsignedPayload = &v
}

// GetSignedPayload returns the SignedPayload field value if set, zero value otherwise.
// Deprecated
func (o *Transfer) GetSignedPayload() string {
	if o == nil || IsNil(o.SignedPayload) {
		var ret string
		return ret
	}
	return *o.SignedPayload
}

// GetSignedPayloadOk returns a tuple with the SignedPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Transfer) GetSignedPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.SignedPayload) {
		return nil, false
	}
	return o.SignedPayload, true
}

// HasSignedPayload returns a boolean if a field has been set.
func (o *Transfer) HasSignedPayload() bool {
	if o != nil && !IsNil(o.SignedPayload) {
		return true
	}

	return false
}

// SetSignedPayload gets a reference to the given string and assigns it to the SignedPayload field.
// Deprecated
func (o *Transfer) SetSignedPayload(v string) {
	o.SignedPayload = &v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
// Deprecated
func (o *Transfer) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash) {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Transfer) GetTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionHash) {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *Transfer) HasTransactionHash() bool {
	if o != nil && !IsNil(o.TransactionHash) {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
// Deprecated
func (o *Transfer) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
// Deprecated
func (o *Transfer) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Transfer) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Transfer) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
// Deprecated
func (o *Transfer) SetStatus(v string) {
	o.Status = &v
}

// GetGasless returns the Gasless field value
func (o *Transfer) GetGasless() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Gasless
}

// GetGaslessOk returns a tuple with the Gasless field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetGaslessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gasless, true
}

// SetGasless sets field value
func (o *Transfer) SetGasless(v bool) {
	o.Gasless = v
}

func (o Transfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network_id"] = o.NetworkId
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["address_id"] = o.AddressId
	toSerialize["destination"] = o.Destination
	toSerialize["amount"] = o.Amount
	toSerialize["asset_id"] = o.AssetId
	toSerialize["asset"] = o.Asset
	toSerialize["transfer_id"] = o.TransferId
	if !IsNil(o.Transaction) {
		toSerialize["transaction"] = o.Transaction
	}
	if !IsNil(o.SponsoredSend) {
		toSerialize["sponsored_send"] = o.SponsoredSend
	}
	if !IsNil(o.UnsignedPayload) {
		toSerialize["unsigned_payload"] = o.UnsignedPayload
	}
	if !IsNil(o.SignedPayload) {
		toSerialize["signed_payload"] = o.SignedPayload
	}
	if !IsNil(o.TransactionHash) {
		toSerialize["transaction_hash"] = o.TransactionHash
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["gasless"] = o.Gasless

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Transfer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_id",
		"wallet_id",
		"address_id",
		"destination",
		"amount",
		"asset_id",
		"asset",
		"transfer_id",
		"gasless",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransfer := _Transfer{}

	err = json.Unmarshal(data, &varTransfer)

	if err != nil {
		return err
	}

	*o = Transfer(varTransfer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "network_id")
		delete(additionalProperties, "wallet_id")
		delete(additionalProperties, "address_id")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "asset_id")
		delete(additionalProperties, "asset")
		delete(additionalProperties, "transfer_id")
		delete(additionalProperties, "transaction")
		delete(additionalProperties, "sponsored_send")
		delete(additionalProperties, "unsigned_payload")
		delete(additionalProperties, "signed_payload")
		delete(additionalProperties, "transaction_hash")
		delete(additionalProperties, "status")
		delete(additionalProperties, "gasless")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransfer struct {
	value *Transfer
	isSet bool
}

func (v NullableTransfer) Get() *Transfer {
	return v.value
}

func (v *NullableTransfer) Set(val *Transfer) {
	v.value = val
	v.isSet = true
}

func (v NullableTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransfer(val *Transfer) *NullableTransfer {
	return &NullableTransfer{value: val, isSet: true}
}

func (v NullableTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


