/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenContractOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenContractOptions{}

// TokenContractOptions Options for token contract creation
type TokenContractOptions struct {
	// The name of the token
	Name string `json:"name"`
	// The symbol of the token
	Symbol string `json:"symbol"`
	// The total supply of the token denominated in the whole amount of the token.
	TotalSupply string `json:"total_supply"`
}

type _TokenContractOptions TokenContractOptions

// NewTokenContractOptions instantiates a new TokenContractOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenContractOptions(name string, symbol string, totalSupply string) *TokenContractOptions {
	this := TokenContractOptions{}
	this.Name = name
	this.Symbol = symbol
	this.TotalSupply = totalSupply
	return &this
}

// NewTokenContractOptionsWithDefaults instantiates a new TokenContractOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenContractOptionsWithDefaults() *TokenContractOptions {
	this := TokenContractOptions{}
	return &this
}

// GetName returns the Name field value
func (o *TokenContractOptions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenContractOptions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenContractOptions) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *TokenContractOptions) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TokenContractOptions) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TokenContractOptions) SetSymbol(v string) {
	o.Symbol = v
}

// GetTotalSupply returns the TotalSupply field value
func (o *TokenContractOptions) GetTotalSupply() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value
// and a boolean to check if the value has been set.
func (o *TokenContractOptions) GetTotalSupplyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSupply, true
}

// SetTotalSupply sets field value
func (o *TokenContractOptions) SetTotalSupply(v string) {
	o.TotalSupply = v
}

func (o TokenContractOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenContractOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	toSerialize["total_supply"] = o.TotalSupply
	return toSerialize, nil
}

func (o *TokenContractOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"symbol",
		"total_supply",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenContractOptions := _TokenContractOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenContractOptions)

	if err != nil {
		return err
	}

	*o = TokenContractOptions(varTokenContractOptions)

	return err
}

type NullableTokenContractOptions struct {
	value *TokenContractOptions
	isSet bool
}

func (v NullableTokenContractOptions) Get() *TokenContractOptions {
	return v.value
}

func (v *NullableTokenContractOptions) Set(val *TokenContractOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenContractOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenContractOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenContractOptions(val *TokenContractOptions) *NullableTokenContractOptions {
	return &NullableTokenContractOptions{value: val, isSet: true}
}

func (v NullableTokenContractOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenContractOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


