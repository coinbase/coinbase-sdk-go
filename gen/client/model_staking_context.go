/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the StakingContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StakingContext{}

// StakingContext Context needed to perform a staking operation
type StakingContext struct {
	Context StakingContextContext `json:"context"`
	AdditionalProperties map[string]interface{}
}

type _StakingContext StakingContext

// NewStakingContext instantiates a new StakingContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakingContext(context StakingContextContext) *StakingContext {
	this := StakingContext{}
	this.Context = context
	return &this
}

// NewStakingContextWithDefaults instantiates a new StakingContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakingContextWithDefaults() *StakingContext {
	this := StakingContext{}
	return &this
}

// GetContext returns the Context field value
func (o *StakingContext) GetContext() StakingContextContext {
	if o == nil {
		var ret StakingContextContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *StakingContext) GetContextOk() (*StakingContextContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *StakingContext) SetContext(v StakingContextContext) {
	o.Context = v
}

func (o StakingContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StakingContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StakingContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStakingContext := _StakingContext{}

	err = json.Unmarshal(data, &varStakingContext)

	if err != nil {
		return err
	}

	*o = StakingContext(varStakingContext)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "context")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStakingContext struct {
	value *StakingContext
	isSet bool
}

func (v NullableStakingContext) Get() *StakingContext {
	return v.value
}

func (v *NullableStakingContext) Set(val *StakingContext) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingContext) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingContext(val *StakingContext) *NullableStakingContext {
	return &NullableStakingContext{value: val, isSet: true}
}

func (v NullableStakingContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


