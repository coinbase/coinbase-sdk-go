/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// TransactionContent - struct for TransactionContent
type TransactionContent struct {
	EthereumTransaction *EthereumTransaction
}

// EthereumTransactionAsTransactionContent is a convenience function that returns EthereumTransaction wrapped in TransactionContent
func EthereumTransactionAsTransactionContent(v *EthereumTransaction) TransactionContent {
	return TransactionContent{
		EthereumTransaction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EthereumTransaction
	err = newStrictDecoder(data).Decode(&dst.EthereumTransaction)
	if err == nil {
		jsonEthereumTransaction, _ := json.Marshal(dst.EthereumTransaction)
		if string(jsonEthereumTransaction) == "{}" { // empty struct
			dst.EthereumTransaction = nil
		} else {
			if err = validator.Validate(dst.EthereumTransaction); err != nil {
				dst.EthereumTransaction = nil
			} else {
				match++
			}
		}
	} else {
		dst.EthereumTransaction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EthereumTransaction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TransactionContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TransactionContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionContent) MarshalJSON() ([]byte, error) {
	if src.EthereumTransaction != nil {
		return json.Marshal(&src.EthereumTransaction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionContent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EthereumTransaction != nil {
		return obj.EthereumTransaction
	}

	// all schemas are nil
	return nil
}

type NullableTransactionContent struct {
	value *TransactionContent
	isSet bool
}

func (v NullableTransactionContent) Get() *TransactionContent {
	return v.value
}

func (v *NullableTransactionContent) Set(val *TransactionContent) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionContent) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionContent(val *TransactionContent) *NullableTransactionContent {
	return &NullableTransactionContent{value: val, isSet: true}
}

func (v NullableTransactionContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


