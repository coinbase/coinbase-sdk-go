/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the StakingBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StakingBalance{}

// StakingBalance The staking balances for an address.
type StakingBalance struct {
	// The onchain address for which the staking balances are being fetched.
	Address string `json:"address"`
	// The timestamp of the staking balance in UTC.
	Date time.Time `json:"date"`
	BondedStake Balance `json:"bonded_stake"`
	UnbondedBalance Balance `json:"unbonded_balance"`
	// The type of staking participation.
	ParticipantType string `json:"participant_type"`
}

type _StakingBalance StakingBalance

// NewStakingBalance instantiates a new StakingBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakingBalance(address string, date time.Time, bondedStake Balance, unbondedBalance Balance, participantType string) *StakingBalance {
	this := StakingBalance{}
	this.Address = address
	this.Date = date
	this.BondedStake = bondedStake
	this.UnbondedBalance = unbondedBalance
	this.ParticipantType = participantType
	return &this
}

// NewStakingBalanceWithDefaults instantiates a new StakingBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakingBalanceWithDefaults() *StakingBalance {
	this := StakingBalance{}
	return &this
}

// GetAddress returns the Address field value
func (o *StakingBalance) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *StakingBalance) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *StakingBalance) SetAddress(v string) {
	o.Address = v
}

// GetDate returns the Date field value
func (o *StakingBalance) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *StakingBalance) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *StakingBalance) SetDate(v time.Time) {
	o.Date = v
}

// GetBondedStake returns the BondedStake field value
func (o *StakingBalance) GetBondedStake() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.BondedStake
}

// GetBondedStakeOk returns a tuple with the BondedStake field value
// and a boolean to check if the value has been set.
func (o *StakingBalance) GetBondedStakeOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BondedStake, true
}

// SetBondedStake sets field value
func (o *StakingBalance) SetBondedStake(v Balance) {
	o.BondedStake = v
}

// GetUnbondedBalance returns the UnbondedBalance field value
func (o *StakingBalance) GetUnbondedBalance() Balance {
	if o == nil {
		var ret Balance
		return ret
	}

	return o.UnbondedBalance
}

// GetUnbondedBalanceOk returns a tuple with the UnbondedBalance field value
// and a boolean to check if the value has been set.
func (o *StakingBalance) GetUnbondedBalanceOk() (*Balance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnbondedBalance, true
}

// SetUnbondedBalance sets field value
func (o *StakingBalance) SetUnbondedBalance(v Balance) {
	o.UnbondedBalance = v
}

// GetParticipantType returns the ParticipantType field value
func (o *StakingBalance) GetParticipantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParticipantType
}

// GetParticipantTypeOk returns a tuple with the ParticipantType field value
// and a boolean to check if the value has been set.
func (o *StakingBalance) GetParticipantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParticipantType, true
}

// SetParticipantType sets field value
func (o *StakingBalance) SetParticipantType(v string) {
	o.ParticipantType = v
}

func (o StakingBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StakingBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["date"] = o.Date
	toSerialize["bonded_stake"] = o.BondedStake
	toSerialize["unbonded_balance"] = o.UnbondedBalance
	toSerialize["participant_type"] = o.ParticipantType
	return toSerialize, nil
}

func (o *StakingBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"date",
		"bonded_stake",
		"unbonded_balance",
		"participant_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStakingBalance := _StakingBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStakingBalance)

	if err != nil {
		return err
	}

	*o = StakingBalance(varStakingBalance)

	return err
}

type NullableStakingBalance struct {
	value *StakingBalance
	isSet bool
}

func (v NullableStakingBalance) Get() *StakingBalance {
	return v.value
}

func (v *NullableStakingBalance) Set(val *StakingBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingBalance(val *StakingBalance) *NullableStakingBalance {
	return &NullableStakingBalance{value: val, isSet: true}
}

func (v NullableStakingBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


