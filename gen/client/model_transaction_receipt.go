/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the TransactionReceipt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionReceipt{}

// TransactionReceipt The receipt of an onchain transaction's execution.
type TransactionReceipt struct {
	// The status of a transaction is 1 if successful or 0 if it was reverted.
	Status int32 `json:"status"`
	Logs []TransactionLog `json:"logs"`
	// The amount of gas actually used by this transaction.
	GasUsed string `json:"gas_used"`
	// The effective gas price the transaction was charged at.
	EffectiveGasPrice string `json:"effective_gas_price"`
	AdditionalProperties map[string]interface{}
}

type _TransactionReceipt TransactionReceipt

// NewTransactionReceipt instantiates a new TransactionReceipt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionReceipt(status int32, logs []TransactionLog, gasUsed string, effectiveGasPrice string) *TransactionReceipt {
	this := TransactionReceipt{}
	this.Status = status
	this.Logs = logs
	this.GasUsed = gasUsed
	this.EffectiveGasPrice = effectiveGasPrice
	return &this
}

// NewTransactionReceiptWithDefaults instantiates a new TransactionReceipt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionReceiptWithDefaults() *TransactionReceipt {
	this := TransactionReceipt{}
	return &this
}

// GetStatus returns the Status field value
func (o *TransactionReceipt) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransactionReceipt) SetStatus(v int32) {
	o.Status = v
}

// GetLogs returns the Logs field value
func (o *TransactionReceipt) GetLogs() []TransactionLog {
	if o == nil {
		var ret []TransactionLog
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetLogsOk() ([]TransactionLog, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logs, true
}

// SetLogs sets field value
func (o *TransactionReceipt) SetLogs(v []TransactionLog) {
	o.Logs = v
}

// GetGasUsed returns the GasUsed field value
func (o *TransactionReceipt) GetGasUsed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetGasUsedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasUsed, true
}

// SetGasUsed sets field value
func (o *TransactionReceipt) SetGasUsed(v string) {
	o.GasUsed = v
}

// GetEffectiveGasPrice returns the EffectiveGasPrice field value
func (o *TransactionReceipt) GetEffectiveGasPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EffectiveGasPrice
}

// GetEffectiveGasPriceOk returns a tuple with the EffectiveGasPrice field value
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetEffectiveGasPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveGasPrice, true
}

// SetEffectiveGasPrice sets field value
func (o *TransactionReceipt) SetEffectiveGasPrice(v string) {
	o.EffectiveGasPrice = v
}

func (o TransactionReceipt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionReceipt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["logs"] = o.Logs
	toSerialize["gas_used"] = o.GasUsed
	toSerialize["effective_gas_price"] = o.EffectiveGasPrice

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TransactionReceipt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"logs",
		"gas_used",
		"effective_gas_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionReceipt := _TransactionReceipt{}

	err = json.Unmarshal(data, &varTransactionReceipt)

	if err != nil {
		return err
	}

	*o = TransactionReceipt(varTransactionReceipt)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "logs")
		delete(additionalProperties, "gas_used")
		delete(additionalProperties, "effective_gas_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransactionReceipt struct {
	value *TransactionReceipt
	isSet bool
}

func (v NullableTransactionReceipt) Get() *TransactionReceipt {
	return v.value
}

func (v *NullableTransactionReceipt) Set(val *TransactionReceipt) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionReceipt) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionReceipt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionReceipt(val *TransactionReceipt) *NullableTransactionReceipt {
	return &NullableTransactionReceipt{value: val, isSet: true}
}

func (v NullableTransactionReceipt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionReceipt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


