/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the TransactionReceipt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionReceipt{}

// TransactionReceipt The receipt of an onchain transaction's execution.
type TransactionReceipt struct {
	// The address this transaction is to. This is null if the transaction was an init transaction, used to deploy a contract.
	To *string `json:"to,omitempty"`
	// The address this transaction is from.
	From *string `json:"from,omitempty"`
	// The EVM address of the smart contract. If this transaction has a null to address, it is an init transaction used to deploy a contract, in which case this is the address created by that contract.
	ContractAddress *string `json:"contract_address,omitempty"`
	// The index of this transaction in the list of transactions included in the block this transaction was mined in.
	TransactionIndex *int64 `json:"transaction_index,omitempty"`
	// The EIP-2718 transaction type. See https://eips.ethereum.org/EIPS/eip-2718 for more details.
	Type *int32 `json:"type,omitempty"`
	// A bloom-filter, which includes all the addresses and topics included in any log in this transaction.
	LogsBloom *string `json:"logs_bloom,omitempty"`
	// The hash of the block at which the transaction was recorded.
	BlockHash *string `json:"block_hash,omitempty"`
	// The hash of the onchain sponsored send transaction.
	TransactionHash *string `json:"transaction_hash,omitempty"`
	// The block height (number) of the block that this transaction was included in.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// The number of blocks that have been mined since this transaction, including the actual block it was mined in.
	Confirmations *int64 `json:"confirmations,omitempty"`
	// The intermediate state root of a receipt.
	Root *string `json:"root,omitempty"`
	// For the block this transaction was included in, this is the sum of the gas used by each transaction in the ordered list of transactions up to (and including) this transaction.
	CumulativeGasUsed *int64 `json:"cumulative_gas_used,omitempty"`
	// This is true if the block is in a post-Byzantium Hard Fork block.
	Byzantium *bool `json:"byzantium,omitempty"`
	// The status of a transaction is 1 if successful or 0 if it was reverted.
	Status int32 `json:"status"`
	Logs []TransactionLog `json:"logs"`
	// The amount of gas actually used by this transaction.
	GasUsed *string `json:"gas_used,omitempty"`
	// The effective gas price the transaction was charged at.
	EffectiveGasPrice *string `json:"effective_gas_price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TransactionReceipt TransactionReceipt

// NewTransactionReceipt instantiates a new TransactionReceipt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionReceipt(status int32, logs []TransactionLog) *TransactionReceipt {
	this := TransactionReceipt{}
	this.Status = status
	this.Logs = logs
	return &this
}

// NewTransactionReceiptWithDefaults instantiates a new TransactionReceipt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionReceiptWithDefaults() *TransactionReceipt {
	this := TransactionReceipt{}
	return &this
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *TransactionReceipt) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *TransactionReceipt) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *TransactionReceipt) SetTo(v string) {
	o.To = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *TransactionReceipt) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *TransactionReceipt) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *TransactionReceipt) SetFrom(v string) {
	o.From = &v
}

// GetContractAddress returns the ContractAddress field value if set, zero value otherwise.
func (o *TransactionReceipt) GetContractAddress() string {
	if o == nil || IsNil(o.ContractAddress) {
		var ret string
		return ret
	}
	return *o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetContractAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ContractAddress) {
		return nil, false
	}
	return o.ContractAddress, true
}

// HasContractAddress returns a boolean if a field has been set.
func (o *TransactionReceipt) HasContractAddress() bool {
	if o != nil && !IsNil(o.ContractAddress) {
		return true
	}

	return false
}

// SetContractAddress gets a reference to the given string and assigns it to the ContractAddress field.
func (o *TransactionReceipt) SetContractAddress(v string) {
	o.ContractAddress = &v
}

// GetTransactionIndex returns the TransactionIndex field value if set, zero value otherwise.
func (o *TransactionReceipt) GetTransactionIndex() int64 {
	if o == nil || IsNil(o.TransactionIndex) {
		var ret int64
		return ret
	}
	return *o.TransactionIndex
}

// GetTransactionIndexOk returns a tuple with the TransactionIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetTransactionIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.TransactionIndex) {
		return nil, false
	}
	return o.TransactionIndex, true
}

// HasTransactionIndex returns a boolean if a field has been set.
func (o *TransactionReceipt) HasTransactionIndex() bool {
	if o != nil && !IsNil(o.TransactionIndex) {
		return true
	}

	return false
}

// SetTransactionIndex gets a reference to the given int64 and assigns it to the TransactionIndex field.
func (o *TransactionReceipt) SetTransactionIndex(v int64) {
	o.TransactionIndex = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransactionReceipt) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransactionReceipt) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *TransactionReceipt) SetType(v int32) {
	o.Type = &v
}

// GetLogsBloom returns the LogsBloom field value if set, zero value otherwise.
func (o *TransactionReceipt) GetLogsBloom() string {
	if o == nil || IsNil(o.LogsBloom) {
		var ret string
		return ret
	}
	return *o.LogsBloom
}

// GetLogsBloomOk returns a tuple with the LogsBloom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetLogsBloomOk() (*string, bool) {
	if o == nil || IsNil(o.LogsBloom) {
		return nil, false
	}
	return o.LogsBloom, true
}

// HasLogsBloom returns a boolean if a field has been set.
func (o *TransactionReceipt) HasLogsBloom() bool {
	if o != nil && !IsNil(o.LogsBloom) {
		return true
	}

	return false
}

// SetLogsBloom gets a reference to the given string and assigns it to the LogsBloom field.
func (o *TransactionReceipt) SetLogsBloom(v string) {
	o.LogsBloom = &v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *TransactionReceipt) GetBlockHash() string {
	if o == nil || IsNil(o.BlockHash) {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetBlockHashOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHash) {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *TransactionReceipt) HasBlockHash() bool {
	if o != nil && !IsNil(o.BlockHash) {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *TransactionReceipt) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *TransactionReceipt) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash) {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetTransactionHashOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionHash) {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *TransactionReceipt) HasTransactionHash() bool {
	if o != nil && !IsNil(o.TransactionHash) {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
func (o *TransactionReceipt) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *TransactionReceipt) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *TransactionReceipt) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *TransactionReceipt) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetConfirmations returns the Confirmations field value if set, zero value otherwise.
func (o *TransactionReceipt) GetConfirmations() int64 {
	if o == nil || IsNil(o.Confirmations) {
		var ret int64
		return ret
	}
	return *o.Confirmations
}

// GetConfirmationsOk returns a tuple with the Confirmations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetConfirmationsOk() (*int64, bool) {
	if o == nil || IsNil(o.Confirmations) {
		return nil, false
	}
	return o.Confirmations, true
}

// HasConfirmations returns a boolean if a field has been set.
func (o *TransactionReceipt) HasConfirmations() bool {
	if o != nil && !IsNil(o.Confirmations) {
		return true
	}

	return false
}

// SetConfirmations gets a reference to the given int64 and assigns it to the Confirmations field.
func (o *TransactionReceipt) SetConfirmations(v int64) {
	o.Confirmations = &v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *TransactionReceipt) GetRoot() string {
	if o == nil || IsNil(o.Root) {
		var ret string
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetRootOk() (*string, bool) {
	if o == nil || IsNil(o.Root) {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *TransactionReceipt) HasRoot() bool {
	if o != nil && !IsNil(o.Root) {
		return true
	}

	return false
}

// SetRoot gets a reference to the given string and assigns it to the Root field.
func (o *TransactionReceipt) SetRoot(v string) {
	o.Root = &v
}

// GetCumulativeGasUsed returns the CumulativeGasUsed field value if set, zero value otherwise.
func (o *TransactionReceipt) GetCumulativeGasUsed() int64 {
	if o == nil || IsNil(o.CumulativeGasUsed) {
		var ret int64
		return ret
	}
	return *o.CumulativeGasUsed
}

// GetCumulativeGasUsedOk returns a tuple with the CumulativeGasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetCumulativeGasUsedOk() (*int64, bool) {
	if o == nil || IsNil(o.CumulativeGasUsed) {
		return nil, false
	}
	return o.CumulativeGasUsed, true
}

// HasCumulativeGasUsed returns a boolean if a field has been set.
func (o *TransactionReceipt) HasCumulativeGasUsed() bool {
	if o != nil && !IsNil(o.CumulativeGasUsed) {
		return true
	}

	return false
}

// SetCumulativeGasUsed gets a reference to the given int64 and assigns it to the CumulativeGasUsed field.
func (o *TransactionReceipt) SetCumulativeGasUsed(v int64) {
	o.CumulativeGasUsed = &v
}

// GetByzantium returns the Byzantium field value if set, zero value otherwise.
func (o *TransactionReceipt) GetByzantium() bool {
	if o == nil || IsNil(o.Byzantium) {
		var ret bool
		return ret
	}
	return *o.Byzantium
}

// GetByzantiumOk returns a tuple with the Byzantium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetByzantiumOk() (*bool, bool) {
	if o == nil || IsNil(o.Byzantium) {
		return nil, false
	}
	return o.Byzantium, true
}

// HasByzantium returns a boolean if a field has been set.
func (o *TransactionReceipt) HasByzantium() bool {
	if o != nil && !IsNil(o.Byzantium) {
		return true
	}

	return false
}

// SetByzantium gets a reference to the given bool and assigns it to the Byzantium field.
func (o *TransactionReceipt) SetByzantium(v bool) {
	o.Byzantium = &v
}

// GetStatus returns the Status field value
func (o *TransactionReceipt) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransactionReceipt) SetStatus(v int32) {
	o.Status = v
}

// GetLogs returns the Logs field value
func (o *TransactionReceipt) GetLogs() []TransactionLog {
	if o == nil {
		var ret []TransactionLog
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetLogsOk() ([]TransactionLog, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logs, true
}

// SetLogs sets field value
func (o *TransactionReceipt) SetLogs(v []TransactionLog) {
	o.Logs = v
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise.
func (o *TransactionReceipt) GetGasUsed() string {
	if o == nil || IsNil(o.GasUsed) {
		var ret string
		return ret
	}
	return *o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetGasUsedOk() (*string, bool) {
	if o == nil || IsNil(o.GasUsed) {
		return nil, false
	}
	return o.GasUsed, true
}

// HasGasUsed returns a boolean if a field has been set.
func (o *TransactionReceipt) HasGasUsed() bool {
	if o != nil && !IsNil(o.GasUsed) {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given string and assigns it to the GasUsed field.
func (o *TransactionReceipt) SetGasUsed(v string) {
	o.GasUsed = &v
}

// GetEffectiveGasPrice returns the EffectiveGasPrice field value if set, zero value otherwise.
func (o *TransactionReceipt) GetEffectiveGasPrice() string {
	if o == nil || IsNil(o.EffectiveGasPrice) {
		var ret string
		return ret
	}
	return *o.EffectiveGasPrice
}

// GetEffectiveGasPriceOk returns a tuple with the EffectiveGasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionReceipt) GetEffectiveGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveGasPrice) {
		return nil, false
	}
	return o.EffectiveGasPrice, true
}

// HasEffectiveGasPrice returns a boolean if a field has been set.
func (o *TransactionReceipt) HasEffectiveGasPrice() bool {
	if o != nil && !IsNil(o.EffectiveGasPrice) {
		return true
	}

	return false
}

// SetEffectiveGasPrice gets a reference to the given string and assigns it to the EffectiveGasPrice field.
func (o *TransactionReceipt) SetEffectiveGasPrice(v string) {
	o.EffectiveGasPrice = &v
}

func (o TransactionReceipt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionReceipt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.ContractAddress) {
		toSerialize["contract_address"] = o.ContractAddress
	}
	if !IsNil(o.TransactionIndex) {
		toSerialize["transaction_index"] = o.TransactionIndex
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.LogsBloom) {
		toSerialize["logs_bloom"] = o.LogsBloom
	}
	if !IsNil(o.BlockHash) {
		toSerialize["block_hash"] = o.BlockHash
	}
	if !IsNil(o.TransactionHash) {
		toSerialize["transaction_hash"] = o.TransactionHash
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if !IsNil(o.Confirmations) {
		toSerialize["confirmations"] = o.Confirmations
	}
	if !IsNil(o.Root) {
		toSerialize["root"] = o.Root
	}
	if !IsNil(o.CumulativeGasUsed) {
		toSerialize["cumulative_gas_used"] = o.CumulativeGasUsed
	}
	if !IsNil(o.Byzantium) {
		toSerialize["byzantium"] = o.Byzantium
	}
	toSerialize["status"] = o.Status
	toSerialize["logs"] = o.Logs
	if !IsNil(o.GasUsed) {
		toSerialize["gas_used"] = o.GasUsed
	}
	if !IsNil(o.EffectiveGasPrice) {
		toSerialize["effective_gas_price"] = o.EffectiveGasPrice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TransactionReceipt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"logs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionReceipt := _TransactionReceipt{}

	err = json.Unmarshal(data, &varTransactionReceipt)

	if err != nil {
		return err
	}

	*o = TransactionReceipt(varTransactionReceipt)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "to")
		delete(additionalProperties, "from")
		delete(additionalProperties, "contract_address")
		delete(additionalProperties, "transaction_index")
		delete(additionalProperties, "type")
		delete(additionalProperties, "logs_bloom")
		delete(additionalProperties, "block_hash")
		delete(additionalProperties, "transaction_hash")
		delete(additionalProperties, "block_number")
		delete(additionalProperties, "confirmations")
		delete(additionalProperties, "root")
		delete(additionalProperties, "cumulative_gas_used")
		delete(additionalProperties, "byzantium")
		delete(additionalProperties, "status")
		delete(additionalProperties, "logs")
		delete(additionalProperties, "gas_used")
		delete(additionalProperties, "effective_gas_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransactionReceipt struct {
	value *TransactionReceipt
	isSet bool
}

func (v NullableTransactionReceipt) Get() *TransactionReceipt {
	return v.value
}

func (v *NullableTransactionReceipt) Set(val *TransactionReceipt) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionReceipt) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionReceipt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionReceipt(val *TransactionReceipt) *NullableTransactionReceipt {
	return &NullableTransactionReceipt{value: val, isSet: true}
}

func (v NullableTransactionReceipt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionReceipt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


