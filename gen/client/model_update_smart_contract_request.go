/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateSmartContractRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSmartContractRequest{}

// UpdateSmartContractRequest Smart Contract data to be updated
type UpdateSmartContractRequest struct {
	// ABI of the smart contract
	Abi *string `json:"abi,omitempty"`
	// Name of the smart contract
	ContractName *string `json:"contract_name,omitempty"`
}

// NewUpdateSmartContractRequest instantiates a new UpdateSmartContractRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSmartContractRequest() *UpdateSmartContractRequest {
	this := UpdateSmartContractRequest{}
	return &this
}

// NewUpdateSmartContractRequestWithDefaults instantiates a new UpdateSmartContractRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSmartContractRequestWithDefaults() *UpdateSmartContractRequest {
	this := UpdateSmartContractRequest{}
	return &this
}

// GetAbi returns the Abi field value if set, zero value otherwise.
func (o *UpdateSmartContractRequest) GetAbi() string {
	if o == nil || IsNil(o.Abi) {
		var ret string
		return ret
	}
	return *o.Abi
}

// GetAbiOk returns a tuple with the Abi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSmartContractRequest) GetAbiOk() (*string, bool) {
	if o == nil || IsNil(o.Abi) {
		return nil, false
	}
	return o.Abi, true
}

// HasAbi returns a boolean if a field has been set.
func (o *UpdateSmartContractRequest) HasAbi() bool {
	if o != nil && !IsNil(o.Abi) {
		return true
	}

	return false
}

// SetAbi gets a reference to the given string and assigns it to the Abi field.
func (o *UpdateSmartContractRequest) SetAbi(v string) {
	o.Abi = &v
}

// GetContractName returns the ContractName field value if set, zero value otherwise.
func (o *UpdateSmartContractRequest) GetContractName() string {
	if o == nil || IsNil(o.ContractName) {
		var ret string
		return ret
	}
	return *o.ContractName
}

// GetContractNameOk returns a tuple with the ContractName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSmartContractRequest) GetContractNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContractName) {
		return nil, false
	}
	return o.ContractName, true
}

// HasContractName returns a boolean if a field has been set.
func (o *UpdateSmartContractRequest) HasContractName() bool {
	if o != nil && !IsNil(o.ContractName) {
		return true
	}

	return false
}

// SetContractName gets a reference to the given string and assigns it to the ContractName field.
func (o *UpdateSmartContractRequest) SetContractName(v string) {
	o.ContractName = &v
}

func (o UpdateSmartContractRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSmartContractRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Abi) {
		toSerialize["abi"] = o.Abi
	}
	if !IsNil(o.ContractName) {
		toSerialize["contract_name"] = o.ContractName
	}
	return toSerialize, nil
}

type NullableUpdateSmartContractRequest struct {
	value *UpdateSmartContractRequest
	isSet bool
}

func (v NullableUpdateSmartContractRequest) Get() *UpdateSmartContractRequest {
	return v.value
}

func (v *NullableUpdateSmartContractRequest) Set(val *UpdateSmartContractRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSmartContractRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSmartContractRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSmartContractRequest(val *UpdateSmartContractRequest) *NullableUpdateSmartContractRequest {
	return &NullableUpdateSmartContractRequest{value: val, isSet: true}
}

func (v NullableUpdateSmartContractRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSmartContractRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


