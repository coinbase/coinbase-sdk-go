/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the Wallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wallet{}

// Wallet struct for Wallet
type Wallet struct {
	// The server-assigned ID for the wallet.
	Id string `json:"id"`
	// The ID of the blockchain network
	NetworkId string `json:"network_id"`
	DefaultAddress *Address `json:"default_address,omitempty"`
	FeatureSet FeatureSet `json:"feature_set"`
	// The status of the Server-Signer for the wallet if present.
	ServerSignerStatus *string `json:"server_signer_status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Wallet Wallet

// NewWallet instantiates a new Wallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWallet(id string, networkId string, featureSet FeatureSet) *Wallet {
	this := Wallet{}
	this.Id = id
	this.NetworkId = networkId
	this.FeatureSet = featureSet
	return &this
}

// NewWalletWithDefaults instantiates a new Wallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletWithDefaults() *Wallet {
	this := Wallet{}
	return &this
}

// GetId returns the Id field value
func (o *Wallet) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Wallet) SetId(v string) {
	o.Id = v
}

// GetNetworkId returns the NetworkId field value
func (o *Wallet) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *Wallet) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetDefaultAddress returns the DefaultAddress field value if set, zero value otherwise.
func (o *Wallet) GetDefaultAddress() Address {
	if o == nil || IsNil(o.DefaultAddress) {
		var ret Address
		return ret
	}
	return *o.DefaultAddress
}

// GetDefaultAddressOk returns a tuple with the DefaultAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetDefaultAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.DefaultAddress) {
		return nil, false
	}
	return o.DefaultAddress, true
}

// HasDefaultAddress returns a boolean if a field has been set.
func (o *Wallet) HasDefaultAddress() bool {
	if o != nil && !IsNil(o.DefaultAddress) {
		return true
	}

	return false
}

// SetDefaultAddress gets a reference to the given Address and assigns it to the DefaultAddress field.
func (o *Wallet) SetDefaultAddress(v Address) {
	o.DefaultAddress = &v
}

// GetFeatureSet returns the FeatureSet field value
func (o *Wallet) GetFeatureSet() FeatureSet {
	if o == nil {
		var ret FeatureSet
		return ret
	}

	return o.FeatureSet
}

// GetFeatureSetOk returns a tuple with the FeatureSet field value
// and a boolean to check if the value has been set.
func (o *Wallet) GetFeatureSetOk() (*FeatureSet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureSet, true
}

// SetFeatureSet sets field value
func (o *Wallet) SetFeatureSet(v FeatureSet) {
	o.FeatureSet = v
}

// GetServerSignerStatus returns the ServerSignerStatus field value if set, zero value otherwise.
func (o *Wallet) GetServerSignerStatus() string {
	if o == nil || IsNil(o.ServerSignerStatus) {
		var ret string
		return ret
	}
	return *o.ServerSignerStatus
}

// GetServerSignerStatusOk returns a tuple with the ServerSignerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wallet) GetServerSignerStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSignerStatus) {
		return nil, false
	}
	return o.ServerSignerStatus, true
}

// HasServerSignerStatus returns a boolean if a field has been set.
func (o *Wallet) HasServerSignerStatus() bool {
	if o != nil && !IsNil(o.ServerSignerStatus) {
		return true
	}

	return false
}

// SetServerSignerStatus gets a reference to the given string and assigns it to the ServerSignerStatus field.
func (o *Wallet) SetServerSignerStatus(v string) {
	o.ServerSignerStatus = &v
}

func (o Wallet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["network_id"] = o.NetworkId
	if !IsNil(o.DefaultAddress) {
		toSerialize["default_address"] = o.DefaultAddress
	}
	toSerialize["feature_set"] = o.FeatureSet
	if !IsNil(o.ServerSignerStatus) {
		toSerialize["server_signer_status"] = o.ServerSignerStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Wallet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"network_id",
		"feature_set",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWallet := _Wallet{}

	err = json.Unmarshal(data, &varWallet)

	if err != nil {
		return err
	}

	*o = Wallet(varWallet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "network_id")
		delete(additionalProperties, "default_address")
		delete(additionalProperties, "feature_set")
		delete(additionalProperties, "server_signer_status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWallet struct {
	value *Wallet
	isSet bool
}

func (v NullableWallet) Get() *Wallet {
	return v.value
}

func (v *NullableWallet) Set(val *Wallet) {
	v.value = val
	v.isSet = true
}

func (v NullableWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWallet(val *Wallet) *NullableWallet {
	return &NullableWallet{value: val, isSet: true}
}

func (v NullableWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


