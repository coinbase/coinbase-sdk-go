/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the Trade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trade{}

// Trade A trade of an asset to another asset
type Trade struct {
	// The ID of the blockchain network
	NetworkId string `json:"network_id"`
	// The ID of the wallet that owns the from address
	WalletId string `json:"wallet_id"`
	// The onchain address of the sender
	AddressId string `json:"address_id"`
	// The ID of the trade
	TradeId string `json:"trade_id"`
	// The amount of the from asset to be traded (in atomic units of the from asset)
	FromAmount string `json:"from_amount"`
	FromAsset Asset `json:"from_asset"`
	// The amount of the to asset that will be received (in atomic units of the to asset)
	ToAmount string `json:"to_amount"`
	ToAsset Asset `json:"to_asset"`
	Transaction Transaction `json:"transaction"`
	ApproveTransaction *Transaction `json:"approve_transaction,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Trade Trade

// NewTrade instantiates a new Trade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrade(networkId string, walletId string, addressId string, tradeId string, fromAmount string, fromAsset Asset, toAmount string, toAsset Asset, transaction Transaction) *Trade {
	this := Trade{}
	this.NetworkId = networkId
	this.WalletId = walletId
	this.AddressId = addressId
	this.TradeId = tradeId
	this.FromAmount = fromAmount
	this.FromAsset = fromAsset
	this.ToAmount = toAmount
	this.ToAsset = toAsset
	this.Transaction = transaction
	return &this
}

// NewTradeWithDefaults instantiates a new Trade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeWithDefaults() *Trade {
	this := Trade{}
	return &this
}

// GetNetworkId returns the NetworkId field value
func (o *Trade) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *Trade) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *Trade) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetWalletId returns the WalletId field value
func (o *Trade) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *Trade) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *Trade) SetWalletId(v string) {
	o.WalletId = v
}

// GetAddressId returns the AddressId field value
func (o *Trade) GetAddressId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value
// and a boolean to check if the value has been set.
func (o *Trade) GetAddressIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressId, true
}

// SetAddressId sets field value
func (o *Trade) SetAddressId(v string) {
	o.AddressId = v
}

// GetTradeId returns the TradeId field value
func (o *Trade) GetTradeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TradeId
}

// GetTradeIdOk returns a tuple with the TradeId field value
// and a boolean to check if the value has been set.
func (o *Trade) GetTradeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeId, true
}

// SetTradeId sets field value
func (o *Trade) SetTradeId(v string) {
	o.TradeId = v
}

// GetFromAmount returns the FromAmount field value
func (o *Trade) GetFromAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAmount
}

// GetFromAmountOk returns a tuple with the FromAmount field value
// and a boolean to check if the value has been set.
func (o *Trade) GetFromAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAmount, true
}

// SetFromAmount sets field value
func (o *Trade) SetFromAmount(v string) {
	o.FromAmount = v
}

// GetFromAsset returns the FromAsset field value
func (o *Trade) GetFromAsset() Asset {
	if o == nil {
		var ret Asset
		return ret
	}

	return o.FromAsset
}

// GetFromAssetOk returns a tuple with the FromAsset field value
// and a boolean to check if the value has been set.
func (o *Trade) GetFromAssetOk() (*Asset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAsset, true
}

// SetFromAsset sets field value
func (o *Trade) SetFromAsset(v Asset) {
	o.FromAsset = v
}

// GetToAmount returns the ToAmount field value
func (o *Trade) GetToAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAmount
}

// GetToAmountOk returns a tuple with the ToAmount field value
// and a boolean to check if the value has been set.
func (o *Trade) GetToAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAmount, true
}

// SetToAmount sets field value
func (o *Trade) SetToAmount(v string) {
	o.ToAmount = v
}

// GetToAsset returns the ToAsset field value
func (o *Trade) GetToAsset() Asset {
	if o == nil {
		var ret Asset
		return ret
	}

	return o.ToAsset
}

// GetToAssetOk returns a tuple with the ToAsset field value
// and a boolean to check if the value has been set.
func (o *Trade) GetToAssetOk() (*Asset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAsset, true
}

// SetToAsset sets field value
func (o *Trade) SetToAsset(v Asset) {
	o.ToAsset = v
}

// GetTransaction returns the Transaction field value
func (o *Trade) GetTransaction() Transaction {
	if o == nil {
		var ret Transaction
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *Trade) GetTransactionOk() (*Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *Trade) SetTransaction(v Transaction) {
	o.Transaction = v
}

// GetApproveTransaction returns the ApproveTransaction field value if set, zero value otherwise.
func (o *Trade) GetApproveTransaction() Transaction {
	if o == nil || IsNil(o.ApproveTransaction) {
		var ret Transaction
		return ret
	}
	return *o.ApproveTransaction
}

// GetApproveTransactionOk returns a tuple with the ApproveTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetApproveTransactionOk() (*Transaction, bool) {
	if o == nil || IsNil(o.ApproveTransaction) {
		return nil, false
	}
	return o.ApproveTransaction, true
}

// HasApproveTransaction returns a boolean if a field has been set.
func (o *Trade) HasApproveTransaction() bool {
	if o != nil && !IsNil(o.ApproveTransaction) {
		return true
	}

	return false
}

// SetApproveTransaction gets a reference to the given Transaction and assigns it to the ApproveTransaction field.
func (o *Trade) SetApproveTransaction(v Transaction) {
	o.ApproveTransaction = &v
}

func (o Trade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network_id"] = o.NetworkId
	toSerialize["wallet_id"] = o.WalletId
	toSerialize["address_id"] = o.AddressId
	toSerialize["trade_id"] = o.TradeId
	toSerialize["from_amount"] = o.FromAmount
	toSerialize["from_asset"] = o.FromAsset
	toSerialize["to_amount"] = o.ToAmount
	toSerialize["to_asset"] = o.ToAsset
	toSerialize["transaction"] = o.Transaction
	if !IsNil(o.ApproveTransaction) {
		toSerialize["approve_transaction"] = o.ApproveTransaction
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Trade) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_id",
		"wallet_id",
		"address_id",
		"trade_id",
		"from_amount",
		"from_asset",
		"to_amount",
		"to_asset",
		"transaction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrade := _Trade{}

	err = json.Unmarshal(data, &varTrade)

	if err != nil {
		return err
	}

	*o = Trade(varTrade)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "network_id")
		delete(additionalProperties, "wallet_id")
		delete(additionalProperties, "address_id")
		delete(additionalProperties, "trade_id")
		delete(additionalProperties, "from_amount")
		delete(additionalProperties, "from_asset")
		delete(additionalProperties, "to_amount")
		delete(additionalProperties, "to_asset")
		delete(additionalProperties, "transaction")
		delete(additionalProperties, "approve_transaction")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrade struct {
	value *Trade
	isSet bool
}

func (v NullableTrade) Get() *Trade {
	return v.value
}

func (v *NullableTrade) Set(val *Trade) {
	v.value = val
	v.isSet = true
}

func (v NullableTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrade(val *Trade) *NullableTrade {
	return &NullableTrade{value: val, isSet: true}
}

func (v NullableTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


