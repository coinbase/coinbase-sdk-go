/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateWalletRequestWallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWalletRequestWallet{}

// CreateWalletRequestWallet Parameters for configuring a wallet
type CreateWalletRequestWallet struct {
	// The ID of the blockchain network
	NetworkId string `json:"network_id"`
	// Whether the wallet should use the project's server signer or if the addresses in the wallets will belong to a private key the developer manages. Defaults to false.
	UseServerSigner *bool `json:"use_server_signer,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateWalletRequestWallet CreateWalletRequestWallet

// NewCreateWalletRequestWallet instantiates a new CreateWalletRequestWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWalletRequestWallet(networkId string) *CreateWalletRequestWallet {
	this := CreateWalletRequestWallet{}
	this.NetworkId = networkId
	return &this
}

// NewCreateWalletRequestWalletWithDefaults instantiates a new CreateWalletRequestWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWalletRequestWalletWithDefaults() *CreateWalletRequestWallet {
	this := CreateWalletRequestWallet{}
	return &this
}

// GetNetworkId returns the NetworkId field value
func (o *CreateWalletRequestWallet) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *CreateWalletRequestWallet) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *CreateWalletRequestWallet) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetUseServerSigner returns the UseServerSigner field value if set, zero value otherwise.
func (o *CreateWalletRequestWallet) GetUseServerSigner() bool {
	if o == nil || IsNil(o.UseServerSigner) {
		var ret bool
		return ret
	}
	return *o.UseServerSigner
}

// GetUseServerSignerOk returns a tuple with the UseServerSigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWalletRequestWallet) GetUseServerSignerOk() (*bool, bool) {
	if o == nil || IsNil(o.UseServerSigner) {
		return nil, false
	}
	return o.UseServerSigner, true
}

// HasUseServerSigner returns a boolean if a field has been set.
func (o *CreateWalletRequestWallet) HasUseServerSigner() bool {
	if o != nil && !IsNil(o.UseServerSigner) {
		return true
	}

	return false
}

// SetUseServerSigner gets a reference to the given bool and assigns it to the UseServerSigner field.
func (o *CreateWalletRequestWallet) SetUseServerSigner(v bool) {
	o.UseServerSigner = &v
}

func (o CreateWalletRequestWallet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWalletRequestWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network_id"] = o.NetworkId
	if !IsNil(o.UseServerSigner) {
		toSerialize["use_server_signer"] = o.UseServerSigner
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateWalletRequestWallet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateWalletRequestWallet := _CreateWalletRequestWallet{}

	err = json.Unmarshal(data, &varCreateWalletRequestWallet)

	if err != nil {
		return err
	}

	*o = CreateWalletRequestWallet(varCreateWalletRequestWallet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "network_id")
		delete(additionalProperties, "use_server_signer")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateWalletRequestWallet struct {
	value *CreateWalletRequestWallet
	isSet bool
}

func (v NullableCreateWalletRequestWallet) Get() *CreateWalletRequestWallet {
	return v.value
}

func (v *NullableCreateWalletRequestWallet) Set(val *CreateWalletRequestWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWalletRequestWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWalletRequestWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWalletRequestWallet(val *CreateWalletRequestWallet) *NullableCreateWalletRequestWallet {
	return &NullableCreateWalletRequestWallet{value: val, isSet: true}
}

func (v NullableCreateWalletRequestWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWalletRequestWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


