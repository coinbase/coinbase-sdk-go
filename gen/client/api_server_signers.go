/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ServerSignersAPI interface {

	/*
	CreateServerSigner Create a new Server-Signer

	Create a new Server-Signer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateServerSignerRequest
	*/
	CreateServerSigner(ctx context.Context) ApiCreateServerSignerRequest

	// CreateServerSignerExecute executes the request
	//  @return ServerSigner
	CreateServerSignerExecute(r ApiCreateServerSignerRequest) (*ServerSigner, *http.Response, error)

	/*
	GetServerSigner Get a server signer by ID

	Get a server signer by ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverSignerId The ID of the server signer to fetch
	@return ApiGetServerSignerRequest
	*/
	GetServerSigner(ctx context.Context, serverSignerId string) ApiGetServerSignerRequest

	// GetServerSignerExecute executes the request
	//  @return ServerSigner
	GetServerSignerExecute(r ApiGetServerSignerRequest) (*ServerSigner, *http.Response, error)

	/*
	ListServerSignerEvents List events for a server signer

	List events for a server signer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverSignerId The ID of the server signer to fetch events for
	@return ApiListServerSignerEventsRequest
	*/
	ListServerSignerEvents(ctx context.Context, serverSignerId string) ApiListServerSignerEventsRequest

	// ListServerSignerEventsExecute executes the request
	//  @return ServerSignerEventList
	ListServerSignerEventsExecute(r ApiListServerSignerEventsRequest) (*ServerSignerEventList, *http.Response, error)

	/*
	ListServerSigners List server signers for the current project

	List server signers for the current project

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListServerSignersRequest
	*/
	ListServerSigners(ctx context.Context) ApiListServerSignersRequest

	// ListServerSignersExecute executes the request
	//  @return ServerSignerList
	ListServerSignersExecute(r ApiListServerSignersRequest) (*ServerSignerList, *http.Response, error)

	/*
	SubmitServerSignerSeedEventResult Submit the result of a server signer event

	Submit the result of a server signer event

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverSignerId The ID of the server signer to submit the event result for
	@return ApiSubmitServerSignerSeedEventResultRequest
	*/
	SubmitServerSignerSeedEventResult(ctx context.Context, serverSignerId string) ApiSubmitServerSignerSeedEventResultRequest

	// SubmitServerSignerSeedEventResultExecute executes the request
	//  @return SeedCreationEventResult
	SubmitServerSignerSeedEventResultExecute(r ApiSubmitServerSignerSeedEventResultRequest) (*SeedCreationEventResult, *http.Response, error)

	/*
	SubmitServerSignerSignatureEventResult Submit the result of a server signer event

	Submit the result of a server signer event

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverSignerId The ID of the server signer to submit the event result for
	@return ApiSubmitServerSignerSignatureEventResultRequest
	*/
	SubmitServerSignerSignatureEventResult(ctx context.Context, serverSignerId string) ApiSubmitServerSignerSignatureEventResultRequest

	// SubmitServerSignerSignatureEventResultExecute executes the request
	//  @return SignatureCreationEventResult
	SubmitServerSignerSignatureEventResultExecute(r ApiSubmitServerSignerSignatureEventResultRequest) (*SignatureCreationEventResult, *http.Response, error)
}

// ServerSignersAPIService ServerSignersAPI service
type ServerSignersAPIService service

type ApiCreateServerSignerRequest struct {
	ctx context.Context
	ApiService ServerSignersAPI
	createServerSignerRequest *CreateServerSignerRequest
}

func (r ApiCreateServerSignerRequest) CreateServerSignerRequest(createServerSignerRequest CreateServerSignerRequest) ApiCreateServerSignerRequest {
	r.createServerSignerRequest = &createServerSignerRequest
	return r
}

func (r ApiCreateServerSignerRequest) Execute() (*ServerSigner, *http.Response, error) {
	return r.ApiService.CreateServerSignerExecute(r)
}

/*
CreateServerSigner Create a new Server-Signer

Create a new Server-Signer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateServerSignerRequest
*/
func (a *ServerSignersAPIService) CreateServerSigner(ctx context.Context) ApiCreateServerSignerRequest {
	return ApiCreateServerSignerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerSigner
func (a *ServerSignersAPIService) CreateServerSignerExecute(r ApiCreateServerSignerRequest) (*ServerSigner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerSigner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerSignersAPIService.CreateServerSigner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server_signers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createServerSignerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServerSignerRequest struct {
	ctx context.Context
	ApiService ServerSignersAPI
	serverSignerId string
}

func (r ApiGetServerSignerRequest) Execute() (*ServerSigner, *http.Response, error) {
	return r.ApiService.GetServerSignerExecute(r)
}

/*
GetServerSigner Get a server signer by ID

Get a server signer by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverSignerId The ID of the server signer to fetch
 @return ApiGetServerSignerRequest
*/
func (a *ServerSignersAPIService) GetServerSigner(ctx context.Context, serverSignerId string) ApiGetServerSignerRequest {
	return ApiGetServerSignerRequest{
		ApiService: a,
		ctx: ctx,
		serverSignerId: serverSignerId,
	}
}

// Execute executes the request
//  @return ServerSigner
func (a *ServerSignersAPIService) GetServerSignerExecute(r ApiGetServerSignerRequest) (*ServerSigner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerSigner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerSignersAPIService.GetServerSigner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server_signers/{server_signer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"server_signer_id"+"}", url.PathEscape(parameterValueToString(r.serverSignerId, "serverSignerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListServerSignerEventsRequest struct {
	ctx context.Context
	ApiService ServerSignersAPI
	serverSignerId string
	limit *int32
	page *string
}

// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
func (r ApiListServerSignerEventsRequest) Limit(limit int32) ApiListServerSignerEventsRequest {
	r.limit = &limit
	return r
}

// A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
func (r ApiListServerSignerEventsRequest) Page(page string) ApiListServerSignerEventsRequest {
	r.page = &page
	return r
}

func (r ApiListServerSignerEventsRequest) Execute() (*ServerSignerEventList, *http.Response, error) {
	return r.ApiService.ListServerSignerEventsExecute(r)
}

/*
ListServerSignerEvents List events for a server signer

List events for a server signer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverSignerId The ID of the server signer to fetch events for
 @return ApiListServerSignerEventsRequest
*/
func (a *ServerSignersAPIService) ListServerSignerEvents(ctx context.Context, serverSignerId string) ApiListServerSignerEventsRequest {
	return ApiListServerSignerEventsRequest{
		ApiService: a,
		ctx: ctx,
		serverSignerId: serverSignerId,
	}
}

// Execute executes the request
//  @return ServerSignerEventList
func (a *ServerSignersAPIService) ListServerSignerEventsExecute(r ApiListServerSignerEventsRequest) (*ServerSignerEventList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerSignerEventList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerSignersAPIService.ListServerSignerEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server_signers/{server_signer_id}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"server_signer_id"+"}", url.PathEscape(parameterValueToString(r.serverSignerId, "serverSignerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListServerSignersRequest struct {
	ctx context.Context
	ApiService ServerSignersAPI
	limit *int32
	page *string
}

// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
func (r ApiListServerSignersRequest) Limit(limit int32) ApiListServerSignersRequest {
	r.limit = &limit
	return r
}

// A cursor for pagination across multiple pages of results. Don&#39;t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
func (r ApiListServerSignersRequest) Page(page string) ApiListServerSignersRequest {
	r.page = &page
	return r
}

func (r ApiListServerSignersRequest) Execute() (*ServerSignerList, *http.Response, error) {
	return r.ApiService.ListServerSignersExecute(r)
}

/*
ListServerSigners List server signers for the current project

List server signers for the current project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListServerSignersRequest
*/
func (a *ServerSignersAPIService) ListServerSigners(ctx context.Context) ApiListServerSignersRequest {
	return ApiListServerSignersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerSignerList
func (a *ServerSignersAPIService) ListServerSignersExecute(r ApiListServerSignersRequest) (*ServerSignerList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerSignerList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerSignersAPIService.ListServerSigners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server_signers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubmitServerSignerSeedEventResultRequest struct {
	ctx context.Context
	ApiService ServerSignersAPI
	serverSignerId string
	seedCreationEventResult *SeedCreationEventResult
}

func (r ApiSubmitServerSignerSeedEventResultRequest) SeedCreationEventResult(seedCreationEventResult SeedCreationEventResult) ApiSubmitServerSignerSeedEventResultRequest {
	r.seedCreationEventResult = &seedCreationEventResult
	return r
}

func (r ApiSubmitServerSignerSeedEventResultRequest) Execute() (*SeedCreationEventResult, *http.Response, error) {
	return r.ApiService.SubmitServerSignerSeedEventResultExecute(r)
}

/*
SubmitServerSignerSeedEventResult Submit the result of a server signer event

Submit the result of a server signer event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverSignerId The ID of the server signer to submit the event result for
 @return ApiSubmitServerSignerSeedEventResultRequest
*/
func (a *ServerSignersAPIService) SubmitServerSignerSeedEventResult(ctx context.Context, serverSignerId string) ApiSubmitServerSignerSeedEventResultRequest {
	return ApiSubmitServerSignerSeedEventResultRequest{
		ApiService: a,
		ctx: ctx,
		serverSignerId: serverSignerId,
	}
}

// Execute executes the request
//  @return SeedCreationEventResult
func (a *ServerSignersAPIService) SubmitServerSignerSeedEventResultExecute(r ApiSubmitServerSignerSeedEventResultRequest) (*SeedCreationEventResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SeedCreationEventResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerSignersAPIService.SubmitServerSignerSeedEventResult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server_signers/{server_signer_id}/seed_event_result"
	localVarPath = strings.Replace(localVarPath, "{"+"server_signer_id"+"}", url.PathEscape(parameterValueToString(r.serverSignerId, "serverSignerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.seedCreationEventResult
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubmitServerSignerSignatureEventResultRequest struct {
	ctx context.Context
	ApiService ServerSignersAPI
	serverSignerId string
	signatureCreationEventResult *SignatureCreationEventResult
}

func (r ApiSubmitServerSignerSignatureEventResultRequest) SignatureCreationEventResult(signatureCreationEventResult SignatureCreationEventResult) ApiSubmitServerSignerSignatureEventResultRequest {
	r.signatureCreationEventResult = &signatureCreationEventResult
	return r
}

func (r ApiSubmitServerSignerSignatureEventResultRequest) Execute() (*SignatureCreationEventResult, *http.Response, error) {
	return r.ApiService.SubmitServerSignerSignatureEventResultExecute(r)
}

/*
SubmitServerSignerSignatureEventResult Submit the result of a server signer event

Submit the result of a server signer event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverSignerId The ID of the server signer to submit the event result for
 @return ApiSubmitServerSignerSignatureEventResultRequest
*/
func (a *ServerSignersAPIService) SubmitServerSignerSignatureEventResult(ctx context.Context, serverSignerId string) ApiSubmitServerSignerSignatureEventResultRequest {
	return ApiSubmitServerSignerSignatureEventResultRequest{
		ApiService: a,
		ctx: ctx,
		serverSignerId: serverSignerId,
	}
}

// Execute executes the request
//  @return SignatureCreationEventResult
func (a *ServerSignersAPIService) SubmitServerSignerSignatureEventResultExecute(r ApiSubmitServerSignerSignatureEventResultRequest) (*SignatureCreationEventResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SignatureCreationEventResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerSignersAPIService.SubmitServerSignerSignatureEventResult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/server_signers/{server_signer_id}/signature_event_result"
	localVarPath = strings.Replace(localVarPath, "{"+"server_signer_id"+"}", url.PathEscape(parameterValueToString(r.serverSignerId, "serverSignerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signatureCreationEventResult
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
