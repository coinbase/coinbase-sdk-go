/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the Validator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Validator{}

// Validator A validator onchain.
type Validator struct {
	// The publicly identifiable unique id of the validator. This can be the public key for Ethereum validators and maybe an address for some other network.
	ValidatorId string `json:"validator_id"`
	// The ID of the blockchain network to which the Validator belongs.
	NetworkId string `json:"network_id"`
	// The ID of the asset that the validator helps stake.
	AssetId string `json:"asset_id"`
	Status ValidatorStatus `json:"status"`
	Details *ValidatorDetails `json:"details,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Validator Validator

// NewValidator instantiates a new Validator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidator(validatorId string, networkId string, assetId string, status ValidatorStatus) *Validator {
	this := Validator{}
	this.ValidatorId = validatorId
	this.NetworkId = networkId
	this.AssetId = assetId
	this.Status = status
	return &this
}

// NewValidatorWithDefaults instantiates a new Validator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatorWithDefaults() *Validator {
	this := Validator{}
	return &this
}

// GetValidatorId returns the ValidatorId field value
func (o *Validator) GetValidatorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidatorId
}

// GetValidatorIdOk returns a tuple with the ValidatorId field value
// and a boolean to check if the value has been set.
func (o *Validator) GetValidatorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorId, true
}

// SetValidatorId sets field value
func (o *Validator) SetValidatorId(v string) {
	o.ValidatorId = v
}

// GetNetworkId returns the NetworkId field value
func (o *Validator) GetNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *Validator) GetNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *Validator) SetNetworkId(v string) {
	o.NetworkId = v
}

// GetAssetId returns the AssetId field value
func (o *Validator) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *Validator) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *Validator) SetAssetId(v string) {
	o.AssetId = v
}

// GetStatus returns the Status field value
func (o *Validator) GetStatus() ValidatorStatus {
	if o == nil {
		var ret ValidatorStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Validator) GetStatusOk() (*ValidatorStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Validator) SetStatus(v ValidatorStatus) {
	o.Status = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Validator) GetDetails() ValidatorDetails {
	if o == nil || IsNil(o.Details) {
		var ret ValidatorDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validator) GetDetailsOk() (*ValidatorDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Validator) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given ValidatorDetails and assigns it to the Details field.
func (o *Validator) SetDetails(v ValidatorDetails) {
	o.Details = &v
}

func (o Validator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Validator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["validator_id"] = o.ValidatorId
	toSerialize["network_id"] = o.NetworkId
	toSerialize["asset_id"] = o.AssetId
	toSerialize["status"] = o.Status
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Validator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"validator_id",
		"network_id",
		"asset_id",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidator := _Validator{}

	err = json.Unmarshal(data, &varValidator)

	if err != nil {
		return err
	}

	*o = Validator(varValidator)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "validator_id")
		delete(additionalProperties, "network_id")
		delete(additionalProperties, "asset_id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableValidator struct {
	value *Validator
	isSet bool
}

func (v NullableValidator) Get() *Validator {
	return v.value
}

func (v *NullableValidator) Set(val *Validator) {
	v.value = val
	v.isSet = true
}

func (v NullableValidator) IsSet() bool {
	return v.isSet
}

func (v *NullableValidator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidator(val *Validator) *NullableValidator {
	return &NullableValidator{value: val, isSet: true}
}

func (v NullableValidator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


