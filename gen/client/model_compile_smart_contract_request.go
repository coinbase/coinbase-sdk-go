/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompileSmartContractRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompileSmartContractRequest{}

// CompileSmartContractRequest struct for CompileSmartContractRequest
type CompileSmartContractRequest struct {
	// The JSON input containing the Solidity code, dependencies, and compiler settings.
	SolidityInputJson string `json:"solidity_input_json"`
	// The name of the contract to compile.
	ContractName string `json:"contract_name"`
	// The version of the Solidity compiler to use.
	SolidityCompilerVersion string `json:"solidity_compiler_version"`
}

type _CompileSmartContractRequest CompileSmartContractRequest

// NewCompileSmartContractRequest instantiates a new CompileSmartContractRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompileSmartContractRequest(solidityInputJson string, contractName string, solidityCompilerVersion string) *CompileSmartContractRequest {
	this := CompileSmartContractRequest{}
	this.SolidityInputJson = solidityInputJson
	this.ContractName = contractName
	this.SolidityCompilerVersion = solidityCompilerVersion
	return &this
}

// NewCompileSmartContractRequestWithDefaults instantiates a new CompileSmartContractRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompileSmartContractRequestWithDefaults() *CompileSmartContractRequest {
	this := CompileSmartContractRequest{}
	return &this
}

// GetSolidityInputJson returns the SolidityInputJson field value
func (o *CompileSmartContractRequest) GetSolidityInputJson() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SolidityInputJson
}

// GetSolidityInputJsonOk returns a tuple with the SolidityInputJson field value
// and a boolean to check if the value has been set.
func (o *CompileSmartContractRequest) GetSolidityInputJsonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SolidityInputJson, true
}

// SetSolidityInputJson sets field value
func (o *CompileSmartContractRequest) SetSolidityInputJson(v string) {
	o.SolidityInputJson = v
}

// GetContractName returns the ContractName field value
func (o *CompileSmartContractRequest) GetContractName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractName
}

// GetContractNameOk returns a tuple with the ContractName field value
// and a boolean to check if the value has been set.
func (o *CompileSmartContractRequest) GetContractNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractName, true
}

// SetContractName sets field value
func (o *CompileSmartContractRequest) SetContractName(v string) {
	o.ContractName = v
}

// GetSolidityCompilerVersion returns the SolidityCompilerVersion field value
func (o *CompileSmartContractRequest) GetSolidityCompilerVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SolidityCompilerVersion
}

// GetSolidityCompilerVersionOk returns a tuple with the SolidityCompilerVersion field value
// and a boolean to check if the value has been set.
func (o *CompileSmartContractRequest) GetSolidityCompilerVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SolidityCompilerVersion, true
}

// SetSolidityCompilerVersion sets field value
func (o *CompileSmartContractRequest) SetSolidityCompilerVersion(v string) {
	o.SolidityCompilerVersion = v
}

func (o CompileSmartContractRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompileSmartContractRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["solidity_input_json"] = o.SolidityInputJson
	toSerialize["contract_name"] = o.ContractName
	toSerialize["solidity_compiler_version"] = o.SolidityCompilerVersion
	return toSerialize, nil
}

func (o *CompileSmartContractRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"solidity_input_json",
		"contract_name",
		"solidity_compiler_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompileSmartContractRequest := _CompileSmartContractRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompileSmartContractRequest)

	if err != nil {
		return err
	}

	*o = CompileSmartContractRequest(varCompileSmartContractRequest)

	return err
}

type NullableCompileSmartContractRequest struct {
	value *CompileSmartContractRequest
	isSet bool
}

func (v NullableCompileSmartContractRequest) Get() *CompileSmartContractRequest {
	return v.value
}

func (v *NullableCompileSmartContractRequest) Set(val *CompileSmartContractRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompileSmartContractRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompileSmartContractRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompileSmartContractRequest(val *CompileSmartContractRequest) *NullableCompileSmartContractRequest {
	return &NullableCompileSmartContractRequest{value: val, isSet: true}
}

func (v NullableCompileSmartContractRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompileSmartContractRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


