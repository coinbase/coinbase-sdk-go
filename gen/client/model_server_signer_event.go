/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerSignerEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerSignerEvent{}

// ServerSignerEvent An event that is waiting to be processed by a Server-Signer.
type ServerSignerEvent struct {
	// The ID of the server-signer that the event is for
	ServerSignerId string `json:"server_signer_id"`
	Event ServerSignerEventEvent `json:"event"`
	AdditionalProperties map[string]interface{}
}

type _ServerSignerEvent ServerSignerEvent

// NewServerSignerEvent instantiates a new ServerSignerEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerSignerEvent(serverSignerId string, event ServerSignerEventEvent) *ServerSignerEvent {
	this := ServerSignerEvent{}
	this.ServerSignerId = serverSignerId
	this.Event = event
	return &this
}

// NewServerSignerEventWithDefaults instantiates a new ServerSignerEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerSignerEventWithDefaults() *ServerSignerEvent {
	this := ServerSignerEvent{}
	return &this
}

// GetServerSignerId returns the ServerSignerId field value
func (o *ServerSignerEvent) GetServerSignerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerSignerId
}

// GetServerSignerIdOk returns a tuple with the ServerSignerId field value
// and a boolean to check if the value has been set.
func (o *ServerSignerEvent) GetServerSignerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerSignerId, true
}

// SetServerSignerId sets field value
func (o *ServerSignerEvent) SetServerSignerId(v string) {
	o.ServerSignerId = v
}

// GetEvent returns the Event field value
func (o *ServerSignerEvent) GetEvent() ServerSignerEventEvent {
	if o == nil {
		var ret ServerSignerEventEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *ServerSignerEvent) GetEventOk() (*ServerSignerEventEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *ServerSignerEvent) SetEvent(v ServerSignerEventEvent) {
	o.Event = v
}

func (o ServerSignerEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerSignerEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["server_signer_id"] = o.ServerSignerId
	toSerialize["event"] = o.Event

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerSignerEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"server_signer_id",
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerSignerEvent := _ServerSignerEvent{}

	err = json.Unmarshal(data, &varServerSignerEvent)

	if err != nil {
		return err
	}

	*o = ServerSignerEvent(varServerSignerEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "server_signer_id")
		delete(additionalProperties, "event")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerSignerEvent struct {
	value *ServerSignerEvent
	isSet bool
}

func (v NullableServerSignerEvent) Get() *ServerSignerEvent {
	return v.value
}

func (v *NullableServerSignerEvent) Set(val *ServerSignerEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSignerEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSignerEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSignerEvent(val *ServerSignerEvent) *NullableServerSignerEvent {
	return &NullableServerSignerEvent{value: val, isSet: true}
}

func (v NullableServerSignerEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSignerEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


