/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookList{}

// WebhookList 
type WebhookList struct {
	Data []Webhook `json:"data"`
	// True if this list has another page of items after this one that can be fetched.
	HasMore *bool `json:"has_more,omitempty"`
	// The page token to be used to fetch the next page.
	NextPage *string `json:"next_page,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebhookList WebhookList

// NewWebhookList instantiates a new WebhookList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookList(data []Webhook) *WebhookList {
	this := WebhookList{}
	this.Data = data
	return &this
}

// NewWebhookListWithDefaults instantiates a new WebhookList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookListWithDefaults() *WebhookList {
	this := WebhookList{}
	return &this
}

// GetData returns the Data field value
func (o *WebhookList) GetData() []Webhook {
	if o == nil {
		var ret []Webhook
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WebhookList) GetDataOk() ([]Webhook, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *WebhookList) SetData(v []Webhook) {
	o.Data = v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *WebhookList) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookList) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *WebhookList) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *WebhookList) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetNextPage returns the NextPage field value if set, zero value otherwise.
func (o *WebhookList) GetNextPage() string {
	if o == nil || IsNil(o.NextPage) {
		var ret string
		return ret
	}
	return *o.NextPage
}

// GetNextPageOk returns a tuple with the NextPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookList) GetNextPageOk() (*string, bool) {
	if o == nil || IsNil(o.NextPage) {
		return nil, false
	}
	return o.NextPage, true
}

// HasNextPage returns a boolean if a field has been set.
func (o *WebhookList) HasNextPage() bool {
	if o != nil && !IsNil(o.NextPage) {
		return true
	}

	return false
}

// SetNextPage gets a reference to the given string and assigns it to the NextPage field.
func (o *WebhookList) SetNextPage(v string) {
	o.NextPage = &v
}

func (o WebhookList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.HasMore) {
		toSerialize["has_more"] = o.HasMore
	}
	if !IsNil(o.NextPage) {
		toSerialize["next_page"] = o.NextPage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookList := _WebhookList{}

	err = json.Unmarshal(data, &varWebhookList)

	if err != nil {
		return err
	}

	*o = WebhookList(varWebhookList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "has_more")
		delete(additionalProperties, "next_page")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookList struct {
	value *WebhookList
	isSet bool
}

func (v NullableWebhookList) Get() *WebhookList {
	return v.value
}

func (v *NullableWebhookList) Set(val *WebhookList) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookList) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookList(val *WebhookList) *NullableWebhookList {
	return &NullableWebhookList{value: val, isSet: true}
}

func (v NullableWebhookList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


