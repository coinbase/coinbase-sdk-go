/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SolanaStakingTransactionDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SolanaStakingTransactionDetail{}

// SolanaStakingTransactionDetail A Solana staking transaction containing both tx related details and non-tx related metadata.
type SolanaStakingTransactionDetail struct {
	Transaction Transaction `json:"transaction"`
	// The onchain validator address to which the SOL got staked to.
	ValidatorAddress string `json:"validator_address"`
}

type _SolanaStakingTransactionDetail SolanaStakingTransactionDetail

// NewSolanaStakingTransactionDetail instantiates a new SolanaStakingTransactionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSolanaStakingTransactionDetail(transaction Transaction, validatorAddress string) *SolanaStakingTransactionDetail {
	this := SolanaStakingTransactionDetail{}
	this.Transaction = transaction
	this.ValidatorAddress = validatorAddress
	return &this
}

// NewSolanaStakingTransactionDetailWithDefaults instantiates a new SolanaStakingTransactionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSolanaStakingTransactionDetailWithDefaults() *SolanaStakingTransactionDetail {
	this := SolanaStakingTransactionDetail{}
	return &this
}

// GetTransaction returns the Transaction field value
func (o *SolanaStakingTransactionDetail) GetTransaction() Transaction {
	if o == nil {
		var ret Transaction
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *SolanaStakingTransactionDetail) GetTransactionOk() (*Transaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *SolanaStakingTransactionDetail) SetTransaction(v Transaction) {
	o.Transaction = v
}

// GetValidatorAddress returns the ValidatorAddress field value
func (o *SolanaStakingTransactionDetail) GetValidatorAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidatorAddress
}

// GetValidatorAddressOk returns a tuple with the ValidatorAddress field value
// and a boolean to check if the value has been set.
func (o *SolanaStakingTransactionDetail) GetValidatorAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorAddress, true
}

// SetValidatorAddress sets field value
func (o *SolanaStakingTransactionDetail) SetValidatorAddress(v string) {
	o.ValidatorAddress = v
}

func (o SolanaStakingTransactionDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SolanaStakingTransactionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction"] = o.Transaction
	toSerialize["validator_address"] = o.ValidatorAddress
	return toSerialize, nil
}

func (o *SolanaStakingTransactionDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction",
		"validator_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSolanaStakingTransactionDetail := _SolanaStakingTransactionDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSolanaStakingTransactionDetail)

	if err != nil {
		return err
	}

	*o = SolanaStakingTransactionDetail(varSolanaStakingTransactionDetail)

	return err
}

type NullableSolanaStakingTransactionDetail struct {
	value *SolanaStakingTransactionDetail
	isSet bool
}

func (v NullableSolanaStakingTransactionDetail) Get() *SolanaStakingTransactionDetail {
	return v.value
}

func (v *NullableSolanaStakingTransactionDetail) Set(val *SolanaStakingTransactionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableSolanaStakingTransactionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableSolanaStakingTransactionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolanaStakingTransactionDetail(val *SolanaStakingTransactionDetail) *NullableSolanaStakingTransactionDetail {
	return &NullableSolanaStakingTransactionDetail{value: val, isSet: true}
}

func (v NullableSolanaStakingTransactionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolanaStakingTransactionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


