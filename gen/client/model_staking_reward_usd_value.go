/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the StakingRewardUSDValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StakingRewardUSDValue{}

// StakingRewardUSDValue The USD value of the reward
type StakingRewardUSDValue struct {
	// The value of the reward in USD
	Amount string `json:"amount"`
	// The conversion price from native currency to USD
	ConversionPrice string `json:"conversion_price"`
	// The time of the conversion in UTC.
	ConversionTime time.Time `json:"conversion_time"`
	AdditionalProperties map[string]interface{}
}

type _StakingRewardUSDValue StakingRewardUSDValue

// NewStakingRewardUSDValue instantiates a new StakingRewardUSDValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakingRewardUSDValue(amount string, conversionPrice string, conversionTime time.Time) *StakingRewardUSDValue {
	this := StakingRewardUSDValue{}
	this.Amount = amount
	this.ConversionPrice = conversionPrice
	this.ConversionTime = conversionTime
	return &this
}

// NewStakingRewardUSDValueWithDefaults instantiates a new StakingRewardUSDValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakingRewardUSDValueWithDefaults() *StakingRewardUSDValue {
	this := StakingRewardUSDValue{}
	return &this
}

// GetAmount returns the Amount field value
func (o *StakingRewardUSDValue) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *StakingRewardUSDValue) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *StakingRewardUSDValue) SetAmount(v string) {
	o.Amount = v
}

// GetConversionPrice returns the ConversionPrice field value
func (o *StakingRewardUSDValue) GetConversionPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConversionPrice
}

// GetConversionPriceOk returns a tuple with the ConversionPrice field value
// and a boolean to check if the value has been set.
func (o *StakingRewardUSDValue) GetConversionPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionPrice, true
}

// SetConversionPrice sets field value
func (o *StakingRewardUSDValue) SetConversionPrice(v string) {
	o.ConversionPrice = v
}

// GetConversionTime returns the ConversionTime field value
func (o *StakingRewardUSDValue) GetConversionTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ConversionTime
}

// GetConversionTimeOk returns a tuple with the ConversionTime field value
// and a boolean to check if the value has been set.
func (o *StakingRewardUSDValue) GetConversionTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversionTime, true
}

// SetConversionTime sets field value
func (o *StakingRewardUSDValue) SetConversionTime(v time.Time) {
	o.ConversionTime = v
}

func (o StakingRewardUSDValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StakingRewardUSDValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["conversion_price"] = o.ConversionPrice
	toSerialize["conversion_time"] = o.ConversionTime

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StakingRewardUSDValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"conversion_price",
		"conversion_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStakingRewardUSDValue := _StakingRewardUSDValue{}

	err = json.Unmarshal(data, &varStakingRewardUSDValue)

	if err != nil {
		return err
	}

	*o = StakingRewardUSDValue(varStakingRewardUSDValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "conversion_price")
		delete(additionalProperties, "conversion_time")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStakingRewardUSDValue struct {
	value *StakingRewardUSDValue
	isSet bool
}

func (v NullableStakingRewardUSDValue) Get() *StakingRewardUSDValue {
	return v.value
}

func (v *NullableStakingRewardUSDValue) Set(val *StakingRewardUSDValue) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingRewardUSDValue) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingRewardUSDValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingRewardUSDValue(val *StakingRewardUSDValue) *NullableStakingRewardUSDValue {
	return &NullableStakingRewardUSDValue{value: val, isSet: true}
}

func (v NullableStakingRewardUSDValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingRewardUSDValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


