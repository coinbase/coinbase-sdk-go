/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TokenTransferType The type of the token transfer.
type TokenTransferType string

// List of TokenTransferType
const (
	TOKENTRANSFERTYPE_ERC20 TokenTransferType = "erc20"
	TOKENTRANSFERTYPE_ERC721 TokenTransferType = "erc721"
	TOKENTRANSFERTYPE_ERC1155 TokenTransferType = "erc1155"
	TOKENTRANSFERTYPE_UNKNOWN TokenTransferType = "unknown"
)

// All allowed values of TokenTransferType enum
var AllowedTokenTransferTypeEnumValues = []TokenTransferType{
	"erc20",
	"erc721",
	"erc1155",
	"unknown",
}

func (v *TokenTransferType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenTransferType(value)
	for _, existing := range AllowedTokenTransferTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TokenTransferType", value)
}

// NewTokenTransferTypeFromValue returns a pointer to a valid TokenTransferType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenTransferTypeFromValue(v string) (*TokenTransferType, error) {
	ev := TokenTransferType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenTransferType: valid values are %v", v, AllowedTokenTransferTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenTransferType) IsValid() bool {
	for _, existing := range AllowedTokenTransferTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenTransferType value
func (v TokenTransferType) Ptr() *TokenTransferType {
	return &v
}

type NullableTokenTransferType struct {
	value *TokenTransferType
	isSet bool
}

func (v NullableTokenTransferType) Get() *TokenTransferType {
	return v.value
}

func (v *NullableTokenTransferType) Set(val *TokenTransferType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenTransferType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenTransferType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenTransferType(val *TokenTransferType) *NullableTokenTransferType {
	return &NullableTokenTransferType{value: val, isSet: true}
}

func (v NullableTokenTransferType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenTransferType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

