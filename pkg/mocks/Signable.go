// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	crypto "crypto"

	mock "github.com/stretchr/testify/mock"
)

// Signable is an autogenerated mock type for the Signable type
type Signable struct {
	mock.Mock
}

// IsSigned provides a mock function with given fields:
func (_m *Signable) IsSigned() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSigned")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Raw provides a mock function with given fields:
func (_m *Signable) Raw() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Raw")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Sign provides a mock function with given fields: _a0
func (_m *Signable) Sign(_a0 crypto.Signer) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(crypto.Signer) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(crypto.Signer) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(crypto.Signer) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSignable creates a new instance of Signable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Signable {
	mock := &Signable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
