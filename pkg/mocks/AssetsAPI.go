// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/coinbase/coinbase-sdk-go/gen/client"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AssetsAPI is an autogenerated mock type for the AssetsAPI type
type AssetsAPI struct {
	mock.Mock
}

// GetAsset provides a mock function with given fields: ctx, networkId, assetId
func (_m *AssetsAPI) GetAsset(ctx context.Context, networkId string, assetId string) client.ApiGetAssetRequest {
	ret := _m.Called(ctx, networkId, assetId)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 client.ApiGetAssetRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetAssetRequest); ok {
		r0 = rf(ctx, networkId, assetId)
	} else {
		r0 = ret.Get(0).(client.ApiGetAssetRequest)
	}

	return r0
}

// GetAssetExecute provides a mock function with given fields: r
func (_m *AssetsAPI) GetAssetExecute(r client.ApiGetAssetRequest) (*client.Asset, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetExecute")
	}

	var r0 *client.Asset
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiGetAssetRequest) (*client.Asset, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiGetAssetRequest) *client.Asset); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiGetAssetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiGetAssetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAssetsAPI creates a new instance of AssetsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetsAPI {
	mock := &AssetsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
